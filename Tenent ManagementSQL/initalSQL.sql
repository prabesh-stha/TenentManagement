CREATE DATABASE TenentManagement;

USE TenentManagement;
--Roles table
CREATE TABLE TBL_ROLES(
ID INT PRIMARY KEY IDENTITY,
NAME VARCHAR(25)
);
--Role Insertion
INSERT INTO TBL_ROLES VALUES ('ADMIN');
INSERT INTO TBL_ROLES VALUES ('OWNER');
INSERT INTO TBL_ROLES VALUES ('TENENT');

--Authentication Table
CREATE TABLE TBL_AUTHENTICATION(
ID INT PRIMARY KEY IDENTITY,
USERNAME VARCHAR(50),
PASSWORD NVARCHAR(100),
EMAIL VARCHAR(50),
ROLEID INT NOT NULL FOREIGN KEY REFERENCES TBL_ROLES,
TOKEN NVARCHAR(100),
EXPIRY DATETIME,
JOINEDDATE DATETIME DEFAULT GETDATE(),
PASSWORDCHANGINGDATE DATETIME DEFAULT GETDATE(),
ISVERIFIED BIT DEFAULT 0,
);

--User Table
CREATE TABLE TBL_USERS(
ID INT PRIMARY KEY IDENTITY,
FIRST_NAME VARCHAR(50),
MIDDLE_NAME VARCHAR(50),
LAST_NAME VARCHAR(50),
AUTHID INT FOREIGN KEY REFERENCES TBL_AUTHENTICATION,
PHONE_NUMBER NVARCHAR(20),
CREATED_AT DATETIME DEFAULT GETDATE()
);

--Property type table
CREATE TABLE TBL_PROPERTY_TYPES(
ID INT PRIMARY KEY IDENTITY,
PROPERTY_TYPE VARCHAR(50)
);

 --Inserting land, home and commercial

INSERT INTO TBL_PROPERTY_TYPES VALUES ('LAND');
INSERT INTO TBL_PROPERTY_TYPES VALUES ('HOME');
INSERT INTO TBL_PROPERTY_TYPES VALUES ('COMMERCIAL');

--Property table
CREATE TABLE TBL_PROPERTY(
ID INT PRIMARY KEY IDENTITY,
NAME VARCHAR(100),
ADDRESS VARCHAR(255),
TYPE INT FOREIGN KEY REFERENCES TBL_PROPERTY_TYPES,
DESCRIPTION VARCHAR(MAX),
CREATEDAT DATETIME DEFAULT GETDATE(),
USERID INT FOREIGN KEY REFERENCES TBL_USERS,
LATITUDE FLOAT,
LONGITUDE FLOAT
);

--Unit Table
CREATE TABLE TBL_UNITS (
    ID INT PRIMARY KEY IDENTITY,
    NAME VARCHAR(100),
    DESCRIPTION VARCHAR(255),
    ISVACANT BIT DEFAULT 1,
    RENTAMOUNT FLOAT,
    RENTSTARTDATE DATETIME,
    RENTENDDATE DATETIME,
    RENTERID INT NULL,
    PROPERTYID INT FOREIGN KEY REFERENCES TBL_PROPERTY(ID) ON DELETE CASCADE,
    FOREIGN KEY (RENTERID) REFERENCES TBL_USERS(ID) ON DELETE CASCADE
);

--payment status table
CREATE TABLE TBL_PAYMENTSTATUS (
ID INT PRIMARY KEY IDENTITY
, STATUS VARCHAR(25)
);

INSERT INTO TBL_PAYMENTSTATUS VALUES ('PENDING');
INSERT INTO TBL_PAYMENTSTATUS VALUES ('PAID');
INSERT INTO TBL_PAYMENTSTATUS VALUES ('UNPAID')

--payment method table
CREATE TABLE TBL_PAYMENTMETHOD(
ID INT PRIMARY KEY IDENTITY
, METHOD VARCHAR(10)
);

INSERT INTO TBL_PAYMENTMETHOD VALUES ('CASH');
INSERT INTO TBL_PAYMENTMETHOD VALUES ('ESEWA');
INSERT INTO TBL_PAYMENTMETHOD VALUES ('KHALTI');
INSERT INTO TBL_PAYMENTMETHOD VALUES ('BANK');

--payment invoice table
CREATE TABLE TBL_PAYMENTINVOICES
(
ID INT PRIMARY KEY IDENTITY
, RENTERID INT
, UNITID INT
, FROMMONTH DATE
, TOMONTH DATE
, DUEDATE DATE
, AMOUNTDUE FLOAT
, OWNERID INT
, PAYMENTMETHODID INT
, OWNERREMARK VARCHAR(255)
, RENTERREMARK VARCHAR(255)
, ISVERIFIED BIT DEFAULT 0
, VERIFIEDAT DATETIME
, STATUSID INT DEFAULT 3
, CREATEDAT DATETIME DEFAULT GETDATE()
, UPDATEDAT DATETIME
, FOREIGN KEY (RENTERID) REFERENCES TBL_USERS(ID)
, FOREIGN KEY (OWNERID) REFERENCES TBL_USERS(ID)
, FOREIGN KEY (PAYMENTMETHODID) REFERENCES TBL_PAYMENTMETHOD(ID)
, FOREIGN KEY (STATUSID) REFERENCES TBL_PAYMENTSTATUS(ID)
);

--payment table
CREATE TABLE TBL_PAYMENT
(
	ID INT PRIMARY KEY IDENTITY
	, PAIDMONTH DATETIME
	, UNITID INT NOT NULL
	, PAYMENTDATE DATETIME DEFAULT GETDATE()
	, AMOUNT FLOAT
	, INVOICEID INT NOT NULL
	, FOREIGN KEY (UNITID) REFERENCES TBL_UNITS(ID)
	, FOREIGN KEY (INVOICEID) REFERENCES TBL_PAYMENTINVOICES(ID)
);

--qr image table
CREATE TABLE TBL_QRPAYMENTIMAGES(
ID INT PRIMARY KEY IDENTITY,
IMAGEDATA VARBINARY(MAX),
IMAGETYPE NVARCHAR(50),
PAYMENTMETHODID INT,
OWNERID INT,
CREATEDAT DATETIME DEFAULT GETDATE(),
UPDATEDAT DATETIME,
FOREIGN KEY (OWNERID) REFERENCES TBL_USERS(ID),
FOREIGN KEY (PAYMENTMETHODID) REFERENCES TBL_PAYMENTMETHOD(ID)
);

--payment proof table
CREATE TABLE TBL_PAYMENTPROOF(
ID INT PRIMARY KEY IDENTITY
,IMAGEDATA VARBINARY(MAX)
,IMAGETYPE NVARCHAR(50)
,PAYMENTMETHODID INT
,OWNERID INT
,CREATEDAT DATETIME DEFAULT GETDATE()
,INVOICEID INT
,FOREIGN KEY (INVOICEID) REFERENCES TBL_PAYMENTINVOICES(ID)
,FOREIGN KEY (OWNERID) REFERENCES TBL_USERS(ID)
,FOREIGN KEY (PAYMENTMETHODID) REFERENCES TBL_PAYMENTMETHOD(ID)
);

--user image table
CREATE TABLE TBL_USERIMAGE(
ID INT PRIMARY KEY IDENTITY
,IMAGEDATA VARBINARY(MAX)
,IMAGETYPE NVARCHAR(50)
,USERID INT
,CREATEDAT DATETIME DEFAULT GETDATE()
,UPDATEDAT DATETIME
,FOREIGN KEY (USERID) REFERENCES TBL_USERS(ID)
);

--property image table
CREATE TABLE TBL_PROPERTYIMAGE(
ID INT PRIMARY KEY IDENTITY
,IMAGEDATA VARBINARY(MAX)
,IMAGETYPE NVARCHAR(50)
,PROPERTYID INT
,CREATEDAT DATETIME DEFAULT GETDATE()
,UPADTEDAT DATETIME
,FOREIGN KEY (PROPERTYID) REFERENCES TBL_PROPERTY(ID)
);


--utility bill type table
CREATE TABLE TBL_UTILITYBILLTYPE
(
ID INT PRIMARY KEY IDENTITY
, TYPE VARCHAR(20)
);

INSERT INTO TBL_UTILITYBILLTYPE (TYPE) VALUES ('ELECTRICITY');
INSERT INTO TBL_UTILITYBILLTYPE (TYPE) VALUES ('WATER');
INSERT INTO TBL_UTILITYBILLTYPE (TYPE) VALUES ('INTERNET');



--utility bill table
CREATE TABLE TBL_UTILITYBILL(
ID INT PRIMARY KEY IDENTITY,
UTILITYTYPE INT,
PROPERTYID INT,
USERID INT,
MONTH DATETIME,
CREATEDAT DATETIME DEFAULT GETUTCDATE(),
TOTALUNIT INT,
CONSUMEDUNIT INT,
ALLOWTENENTACCESS BIT DEFAULT 0,
AMOUNT FLOAT,
ISPAID BIT DEFAULT 0,
FOREIGN KEY (UTILITYTYPE) REFERENCES TBL_UTILITYBILLTYPE(ID),
FOREIGN KEY (PROPERTYID) REFERENCES TBL_PROPERTY(ID),
FOREIGN KEY (USERID) REFERENCES TBL_USERS(ID)
);


--utility bill invoice table
CREATE TABLE TBL_UTILITYBILLINVOICE
(
ID INT PRIMARY KEY IDENTITY
,UTILITYTYPEID INT
,INVOICEID INT
,CONSUMEDUNIT INT
,AMOUNT FLOAT
,CREATEDAT DATETIME DEFAULT GETUTCDATE()
,FOREIGN KEY (INVOICEID) REFERENCES TBL_PAYMENTINVOICES(ID)
,FOREIGN KEY (UTILITYTYPEID) REFERENCES TBL_UTILITYBILLTYPE(ID)
);

--utility bill image table
CREATE TABLE TBL_UTILITYBILLIMAGE
(
	ID INT PRIMARY KEY IDENTITY,
	IMAGEDATA VARBINARY(MAX),
	IMAGETYPE NVARCHAR(50),
	UTILITYBILLID INT,
	CREATEDAT DATETIME DEFAULT GETUTCDATE(),
	FOREIGN KEY (UTILITYBILLID) REFERENCES TBL_UTILITYBILL(ID)
);






--Stored Procedures

--authentication
CREATE PROCEDURE SP_AUTHENTICATION
@FLAG CHAR = NULL,
@ID INT = NULL,
@USERNAME VARCHAR(50) = NULL,
@FIRSTNAME VARCHAR(50) = NULL,
@MIDDLENAME VARCHAR(50) = NULL,
@LASTNAME VARCHAR(50) = NULL,
@PHONENUMBER VARCHAR(20) = NULL,
@PASSWORD NVARCHAR(100) = NULL,
@EMAIL VARCHAR(50) = NULL,
@ROLEID INT = NULL,
@TOKEN NVARCHAR(100) = NULL,
@EXPIRY DATETIME = NULL,
@ISVERIFIED BIT = 0,
@IMAGEDATA VARBINARY(MAX) = NULL,
@IMAGETYPE NVARCHAR(50) = NULL
AS
BEGIN
	--FOR LOGIN
	IF @FLAG = 'L'
		BEGIN
		    SELECT A.ID ID
			, A.PASSWORDCHANGINGDATE PASSWORDCHANGINGDATE
			, U.ID USERID, A.USERNAME
			, A.PASSWORD
			, A.EMAIL
			, A.ISVERIFIED
			, R.NAME ROLE 
			FROM TBL_AUTHENTICATION A
			INNER JOIN TBL_ROLES R ON A.ROLEID = R.ID
			INNER JOIN TBL_USERS U ON A.ID = U.AUTHID
			WHERE
			A.ID = ISNULL(@ID, A.ID)
			  AND A.EMAIL = ISNULL(@EMAIL, A.EMAIL)
			  AND (@ID IS NOT NULL OR @EMAIL IS NOT NULL);

		--Where clause
		--check ID is null or not. if ID is null then Authentication ID is null else Authentication Id = provided ID.
		--and checks email is null or not. If Email is null then Authentication Email is null else Authentication Email = provided Email.
		-- finally the last and makes sure neither is null
		END

	--FOR REGISTER
	IF @FLAG = 'R'
		BEGIN
			SET NOCOUNT ON;
				BEGIN TRY
					BEGIN TRANSACTION;
					-- checking for existing email
						IF EXISTS (SELECT 1 FROM TBL_AUTHENTICATION WHERE EMAIL = @EMAIL)
							BEGIN
								SELECT 'FAIL' STATUS, 'Email is already taken.' MSG;
								ROLLBACK TRANSACTION;
								RETURN;
							END
					--checking for existing username
						IF EXISTS (SELECT 1 FROM TBL_AUTHENTICATION WHERE USERNAME = @USERNAME)
							BEGIN
								SELECT 'FAIL' STATUS, 'Username is already taken.' MSG;
								ROLLBACK TRANSACTION;
								RETURN;
							END

					-- Inserting into authentication table
						INSERT INTO TBL_AUTHENTICATION
						(
						USERNAME
						,PASSWORD
						,EMAIL
						,ROLEID
						) 
						VALUES
						(
						@USERNAME
						,@PASSWORD
						,@EMAIL
						,1);

					-- Getting the id from the authentication table using scope identity function
						DECLARE @AUTHID INT = SCOPE_IDENTITY();

					-- inserting into the owner table.
						INSERT INTO TBL_USERS
						(
						FIRST_NAME
						,MIDDLE_NAME
						,LAST_NAME
						,AUTHID
						,PHONE_NUMBER
						) VALUES
						(
						@FIRSTNAME
						,@MIDDLENAME
						,@LASTNAME
						,@AUTHID
						,@PHONENUMBER
						);
						DECLARE @USERID INT = SCOPE_IDENTITY();

						IF @IMAGEDATA IS NOT NULL AND @IMAGETYPE IS NOT NULL
							BEGIN
							INSERT INTO TBL_USERIMAGE (USERID, IMAGEDATA, IMAGETYPE, CREATEDAT, UPDATEDAT)
							VALUES (@USERID, @IMAGEDATA, @IMAGETYPE, GETUTCDATE(), GETUTCDATE());
									 IF @@ROWCOUNT = 0
									BEGIN
										SELECT 'FAIL' STATUS, 'Failed to create user' MSG;
										ROLLBACK TRANSACTION;
										RETURN;
									END
						END
						IF (@IMAGEDATA IS NULL OR @IMAGETYPE IS NULL)
						BEGIN
							SELECT 'FAIL' STATUS, 'User image is required' MSG;
							ROLLBACK TRANSACTION;
							RETURN;
						END
					-- AuthResponse for status and message
						SELECT 'SUCCESS' STATUS, 'User created successfully.' MSG, @USERID ID;
						COMMIT TRANSACTION;
					END TRY
					BEGIN CATCH
						IF @@TRANCOUNT > 0
							ROLLBACK TRANSACTION;
							SELECT 'FAIL' STATUS, 'asdfasdf' MSG;
					END CATCH
	END

	--FOR VERIFYING USER EMAIL AND UPDATING ISVERIFY TO TRUE
	IF @FLAG = 'V'
		BEGIN
			UPDATE TBL_AUTHENTICATION
			SET
			ISVERIFIED = 1
			,TOKEN = NULL
			,EXPIRY = NULL
			WHERE
			TOKEN = @TOKEN AND EMAIL = @EMAIL;
		END



	--FOR INSERTING TOKEN
	IF @FLAG ='I'
		BEGIN
			IF EXISTS (SELECT 1 FROM TBL_AUTHENTICATION WHERE EMAIL = @EMAIL)
			BEGIN
				UPDATE TBL_AUTHENTICATION
				SET TOKEN = @TOKEN,
				EXPIRY = @EXPIRY
				WHERE EMAIL = @EMAIL
			END
		END

	-- FOR Validating TOKEN
	IF @FLAG = 'G'
		BEGIN
			SELECT EMAIL, TOKEN,EXPIRY FROM TBL_AUTHENTICATION WHERE TOKEN = @TOKEN AND EXPIRY > GETUTCDATE();
		END

	-- FOR UPDATING EMAIL AND PASSWORD USING TOKEN
IF @FLAG = 'U'
BEGIN
    IF NOT EXISTS (SELECT 1 FROM TBL_AUTHENTICATION WHERE EMAIL = @EMAIL)
    BEGIN
        UPDATE TBL_AUTHENTICATION
        SET 
            PASSWORD = ISNULL(NULLIF(LTRIM(RTRIM(@PASSWORD)), ''), PASSWORD),
            EMAIL = ISNULL(NULLIF(LTRIM(RTRIM(@EMAIL)), ''), EMAIL),
            TOKEN = NULL,
            EXPIRY = NULL,
            PASSWORDCHANGINGDATE = CASE 
                                    WHEN LTRIM(RTRIM(@PASSWORD)) <> '' 
                                    THEN GETUTCDATE() 
                                    ELSE PASSWORDCHANGINGDATE 
                                 END
        WHERE TOKEN = @TOKEN;
    END
END


		
	-- FOR UPDATING PASSWORD
	IF @FLAG = 'P'
		BEGIN
			UPDATE	TBL_AUTHENTICATION	
			SET PASSWORD = @PASSWORD,
			PASSWORDCHANGINGDATE = GETUTCDATE()
			WHERE ID = @ID
		END

	-- FOR GETTING USERID TO VALIDATE THE USERNAME
	IF @FLAG = 'S'
		BEGIN
			SELECT
			ID
			FROM TBL_AUTHENTICATION
			WHERE
			USERNAME = @USERNAME
			OR
			EMAIL = @USERNAME
		END

END


--property type
CREATE PROCEDURE SP_PROPERTY_TYPES
@FLAG CHAR = NULL
AS
BEGIN
	IF @FLAG = 'R'
		BEGIN
			SELECT PT.ID, PT.PROPERTY_TYPE NAME FROM TBL_PROPERTY_TYPES PT
		END
END




--property
CREATE PROCEDURE SP_PROPERTY
@FLAG CHAR = NULL,
@ID INT = NULL,
@NAME VARCHAR(100) = NULL,
@ADDRESS VARCHAR(255) = NULL,
@LATITUDE FLOAT = NULL,
@LONGITUDE FLOAT = NULL,
@TYPE INT = NULL,
@DESCRIPTION VARCHAR(MAX) = NULL,
@CREATEDAT DATETIME = NULL,
@USERID INT = NULL,
@IMAGEDATA VARBINARY(MAX) = NULL,
@IMAGETYPE NVARCHAR(50) = NULL,
@STATUS INT = NULL OUTPUT 
AS
BEGIN

	--for inserting new property in table
	IF @FLAG = 'I'
		BEGIN
			SET NOCOUNT ON;
			BEGIN TRY
				BEGIN TRANSACTION;

				INSERT INTO TBL_PROPERTY
					(
					NAME
					,ADDRESS
					,LATITUDE
					,LONGITUDE
					,TYPE
					,DESCRIPTION
					,USERID
					)
					VALUES
					(
					@NAME
					,@ADDRESS
					,@LATITUDE
					,@LONGITUDE
					,@TYPE
					,@DESCRIPTION
					,@USERID
					)
						DECLARE @PROPERTYID INT = SCOPE_IDENTITY();
					
					IF @IMAGEDATA IS NOT NULL AND @IMAGETYPE IS NOT NULL
					BEGIN

						INSERT INTO TBL_PROPERTYIMAGE
						(
						IMAGEDATA
						,IMAGETYPE
						,PROPERTYID
						,CREATEDAT
						,UPADTEDAT
						)
						VALUES
						(
						@IMAGEDATA
						,@IMAGETYPE
						,@PROPERTYID
						,GETDATE()
						,GETDATE()
						)
					END
				COMMIT TRANSACTION;
				 SET @STATUS = 1;
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
					ROLLBACK TRANSACTION;
			END CATCH
		END

		--for getting single property detail
		IF @FLAG = 'S'
			BEGIN
				SELECT
				P.ID
				,P.NAME
				,P.ADDRESS
				,P.LATITUDE
				,P.LONGITUDE
				,PT.PROPERTY_TYPE TYPENAME
				,P.TYPE
				,A.FIRST_NAME +
					CASE
						WHEN MIDDLE_NAME IS NOT NULL THEN ' ' + MIDDLE_NAME
						ELSE ''
					END +
					' ' + LAST_NAME AS OWNERNAME
				,P.DESCRIPTION
				FROM TBL_PROPERTY P
				INNER JOIN TBL_PROPERTY_TYPES PT ON PT.ID = P.TYPE
				INNER JOIN TBL_USERS A ON A.ID = P.USERID
				WHERE P.ID = @ID
			END

		--for getting all the property of the user
		IF @FLAG = 'R'
				BEGIN
					SELECT
					P.ID
					,P.NAME
					,P.ADDRESS
					,P.LATITUDE
					,P.LONGITUDE
					,PT.PROPERTY_TYPE TYPENAME
					,P.TYPE TYPE
					,P.CREATEDAT
					FROM TBL_PROPERTY P
					INNER JOIN TBL_PROPERTY_TYPES PT ON PT.ID = P.TYPE
					WHERE P.USERID = @USERID
				END


		-- for updating the property detail
		IF @FLAG = 'U'
				BEGIN
					SET NOCOUNT ON;
			BEGIN TRY
				BEGIN TRANSACTION;

					UPDATE TBL_PROPERTY
						SET
							NAME = ISNULL(@NAME, NAME),
							ADDRESS = ISNULL(@ADDRESS, ADDRESS),
							LATITUDE = ISNULL(@LATITUDE, LATITUDE),
							LONGITUDE = ISNULL(@LONGITUDE, LONGITUDE),
							TYPE = ISNULL(@TYPE, TYPE),
							DESCRIPTION = ISNULL(@DESCRIPTION, DESCRIPTION)
						WHERE ID = @ID;
					
					IF @IMAGEDATA IS NOT NULL AND @IMAGETYPE IS NOT NULL
					BEGIN
						IF EXISTS(SELECT 1 FROM TBL_PROPERTYIMAGE WHERE PROPERTYID = @PROPERTYID)
							BEGIN
								UPDATE TBL_PROPERTYIMAGE
								SET
								IMAGEDATA = @IMAGEDATA
								,IMAGETYPE = @IMAGETYPE
								,UPADTEDAT = GETDATE()
								WHERE PROPERTYID = @ID
							END
						ELSE
							BEGIN
								INSERT INTO TBL_PROPERTYIMAGE
								(
								IMAGEDATA
								,IMAGETYPE
								,PROPERTYID
								,CREATEDAT
								,UPADTEDAT
								)
								VALUES
								(
								@IMAGEDATA
								,@IMAGETYPE
								,@ID
								,GETDATE()
								,GETDATE()
								)
							END
					END
				COMMIT TRANSACTION;
				 SET @STATUS = 1;
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
					ROLLBACK TRANSACTION;
			END CATCH
				END

		--for deleting the property
		IF @FLAG = 'D'
				BEGIN
					SET NOCOUNT ON;
					BEGIN TRY
						BEGIN TRANSACTION;
							DELETE FROM TBL_UNITS WHERE PROPERTYID = @ID;
							DELETE FROM TBL_PROPERTYIMAGE WHERE PROPERTYID = @ID
							DELETE FROM TBL_PROPERTY WHERE ID = @ID
						COMMIT TRANSACTION;
						 SET @STATUS = 1;
					END TRY
					BEGIN CATCH
						IF @@TRANCOUNT > 0
							ROLLBACK TRANSACTION;
					END CATCH
				END

		--for all the rented property
		IF @FLAG = 'T'
				BEGIN
					SELECT
					DISTINCT
					P.ID
					,P.NAME
					,P.ADDRESS
					,P.LATITUDE
					,P.LONGITUDE
					,PT.PROPERTY_TYPE TYPENAME
					,P.TYPE
					,P.CREATEDAT
					FROM TBL_UNITS U
					INNER JOIN TBL_PROPERTY P ON P.ID = U.PROPERTYID
					INNER JOIN TBL_PROPERTY_TYPES PT ON PT.ID = P.TYPE
					WHERE U.RENTERID = @USERID
				END

		--get all the property name of the user
		IF @FLAG = 'O'
			BEGIN
				SELECT
				P.ID
				,P.NAME AS PROPERTYNAME
				FROM TBL_PROPERTY P
				WHERE P.USERID = @USERID
			END
END


--units
CREATE PROCEDURE SP_UNITS
@FLAG CHAR = NULL
,@ID INT = NULL
,@NAME VARCHAR(100) = NULL
,@DESCRIPTION VARCHAR(255) = NULL
,@ISVACANT BIT = NULL
,@RENTAMOUNT FLOAT = NULL
,@RENTSTARTDATE DATETIME = NULL
,@RENTENDDATE DATETIME = NULL
,@RENTERID INT = NULL
,@PROPERTYID INT = NULL
AS
BEGIN
	IF @FLAG = 'I'
		BEGIN
			INSERT INTO TBL_UNITS
			(
			NAME
			,DESCRIPTION
			,ISVACANT
			,RENTAMOUNT
			,RENTSTARTDATE
			,RENTENDDATE
			,RENTERID
			,PROPERTYID
			)
			VALUES
			(
			@NAME
			,@DESCRIPTION
			,@ISVACANT
			,@RENTAMOUNT
			,@RENTSTARTDATE
			,@RENTENDDATE
			,@RENTERID
			,@PROPERTYID
			)
		END

	--To get all the units of property
	IF @FLAG = 'R'
		BEGIN
			SELECT * FROM TBL_UNITS
			WHERE
			PROPERTYID = @PROPERTYID
		END

	--To get all the units of property rented by the renter
	IF @FLAG = 'M'
		BEGIN
			SELECT * FROM TBL_UNITS
			WHERE
			PROPERTYID = @PROPERTYID
			AND
			RENTERID = @RENTERID
		END

	--get unit by id
	IF @FLAG = 'L'
		BEGIN
			SELECT 
				U.*, 
				CASE 
					WHEN U.RENTERID IS NULL THEN NULL 
					ELSE A.USERNAME 
				END AS RENTERUSERNAME 
			FROM TBL_UNITS U
			LEFT JOIN TBL_USERS P ON P.ID = U.RENTERID
			LEFT JOIN TBL_AUTHENTICATION A ON A.ID = P.AUTHID
			WHERE U.ID = @ID
		END

	--To get the single description of unit and property For RentedDetail view only
	IF @FLAG = 'S'
		BEGIN
			SELECT
			U.ID
			,U.NAME UNITNAME
			,U.DESCRIPTION UNITDESCRIPTION
			,U.RENTAMOUNT
			,U.RENTSTARTDATE
			,U.RENTENDDATE
			,U.RENTERID
			,P.ID PROPERTYID
			,P.NAME PROPERTYNAME
			,P.ADDRESS PROPERTYADDRESS
			,P.LATITUDE PROPERTYLATITUDE
			,P.LONGITUDE PROPERTYLONGITUDE
			,P.TYPE PROPERTYTYPE
			,PT.PROPERTY_TYPE TYPENAME
			,P.DESCRIPTION PROPERTYDESCRIPTION
			,O.ID OWNERID
			,O.FIRST_NAME OWNERFIRSTNAME
			,O.LAST_NAME OWNERLASTNAME
			,O.PHONE_NUMBER OWNERPHONENUMBER
			,A.EMAIL OWNEREMAIL
			FROM TBL_UNITS U
			INNER JOIN TBL_PROPERTY P ON P.ID = U.PROPERTYID
			INNER JOIN TBL_PROPERTY_TYPES PT ON P.TYPE = PT.ID
			INNER JOIN TBL_USERS O ON O.ID = P.USERID
			INNER JOIN TBL_AUTHENTICATION A ON A.ID = O.AUTHID
			WHERE
			U.ID = @ID
		END
--To get the single description of unit and property For Owner Unit Detail view only
	IF @FLAG = 'O'
		BEGIN
			SELECT
			U.ID
			,U.NAME UNITNAME
			,U.DESCRIPTION UNITDESCRIPTION
			,U.RENTAMOUNT
			,U.RENTSTARTDATE
			,U.RENTENDDATE
			,U.RENTERID
			,P.ID PROPERTYID
			,P.NAME PROPERTYNAME
			,P.ADDRESS PROPERTYADDRESS
			,P.LATITUDE PROPERTYLATITUDE
			,P.LONGITUDE PROPERTYLONGITUDE
			,P.TYPE PROPERTYTYPE
			,PT.PROPERTY_TYPE TYPENAME
			,P.DESCRIPTION PROPERTYDESCRIPTION
			,O.FIRST_NAME RENTERFIRSTNAME
			,O.LAST_NAME RENTERLASTNAME
			,O.PHONE_NUMBER RENTERPHONENUMBER
			,A.EMAIL RENTEREMAIL
			FROM TBL_UNITS U
			INNER JOIN TBL_PROPERTY P ON P.ID = U.PROPERTYID
			INNER JOIN TBL_PROPERTY_TYPES PT ON P.TYPE = PT.ID
			LEFT JOIN TBL_USERS O ON O.ID = U.RENTERID
			LEFT JOIN TBL_AUTHENTICATION A ON A.ID = O.AUTHID
			WHERE
			U.ID = @ID
		END

		-- for updating the property detail
	IF @FLAG = 'U'
		BEGIN
			UPDATE TBL_UNITS
			SET
			NAME = ISNULL(@NAME, NAME),
			DESCRIPTION = ISNULL(@DESCRIPTION, DESCRIPTION),
			ISVACANT = ISNULL(@ISVACANT, ISVACANT),
			RENTAMOUNT = ISNULL(@RENTAMOUNT, RENTAMOUNT),
			RENTSTARTDATE = @RENTSTARTDATE,
			RENTENDDATE = @RENTENDDATE,
			RENTERID = @RENTERID
			WHERE ID = @ID
		END


	--for deleting the property
	IF @FLAG = 'D'
		BEGIN
			DELETE FROM TBL_UNITS WHERE ID = @ID
		END


	--for getting all the unit of renter
	IF @FLAG = 'A'
		BEGIN
			SELECT * FROM TBL_UNITS
			WHERE RENTERID = @RENTERID
		END

END





--payment status
CREATE PROCEDURE SP_PAYMENTSTATUS
@FLAG CHAR NULL
AS
BEGIN
	IF @FLAG = 'R'
		BEGIN
			SELECT ID, STATUS FROM TBL_PAYMENTSTATUS;
		END
END


--payment methods
CREATE PROCEDURE SP_PAYMENTMETHOD
@FLAG CHAR = NULL,
@OWNERID INT = NULL
AS
BEGIN
	IF @FLAG = 'R'
		BEGIN
			SELECT P.ID, P.METHOD PAYMENTMETHOD
			FROM TBL_QRPAYMENTIMAGES Q
			INNER JOIN TBL_PAYMENTMETHOD P ON P.ID = Q.PAYMENTMETHODID
			WHERE Q.OWNERID = OWNERID

			UNION

			SELECT *
			FROM TBL_PAYMENTMETHOD
			WHERE ID = 1
		END
END




--payment invoices
CREATE PROCEDURE SP_PAYMENTINVOICES
@FLAG CHAR = NULL
,@ID INT = NULL
,@RENTERID INT = NULL
,@UNITID INT = NULL
,@FROMMONTH DATE = NULL
,@TOMONTH DATE = NULL
,@DUEDATE DATE = NULL
,@AMOUNTDUE FLOAT = NULL
,@OWNERID INT = NULL
,@PAYMENTMETHODID INT = NULL
,@OWNERREMARK VARCHAR(255) = NULL
,@RENTERREMARK VARCHAR(255) = NULL
,@ISVERIFIED BIT = NULL
,@VERIFIEDAT DATETIME = NULL
,@STATUSID INT = NULL
,@CREATEDAT DATETIME = NULL
,@UPDATEDAT DATETIME = NULL
,@INSERTEDID INT =NULL OUTPUT
AS
BEGIN

--insert
	IF @FLAG = 'I'
		BEGIN
			INSERT INTO TBL_PAYMENTINVOICES
			(RENTERID
			,UNITID
			,FROMMONTH
			,TOMONTH
			,DUEDATE
			,AMOUNTDUE
			,OWNERID
			,PAYMENTMETHODID
			,OWNERREMARK
			,RENTERREMARK
			,ISVERIFIED
			,VERIFIEDAT
			,STATUSID
			,UPDATEDAT
			)
			VALUES
			(
			@RENTERID
			,@UNITID
			,@FROMMONTH
			,@TOMONTH
			,@DUEDATE
			,@AMOUNTDUE
			,@OWNERID
			,@PAYMENTMETHODID
			,@OWNERREMARK
			,@RENTERREMARK
			,@ISVERIFIED
			,@VERIFIEDAT
			,@STATUSID
			,@UPDATEDAT
			)
			    SET @INSERTEDID = SCOPE_IDENTITY();

		END

	--update
	IF @FLAG = 'U'
		BEGIN
			UPDATE TBL_PAYMENTINVOICES
			SET
			FROMMONTH = @FROMMONTH
			,TOMONTH = @TOMONTH
			,DUEDATE = @DUEDATE
			,AMOUNTDUE = @AMOUNTDUE
			,PAYMENTMETHODID = @PAYMENTMETHODID
			,OWNERREMARK = @OWNERREMARK
			,RENTERREMARK = @RENTERREMARK
			,ISVERIFIED = ISNULL(@ISVERIFIED, ISVERIFIED)
			,VERIFIEDAT = @VERIFIEDAT
			,STATUSID = @STATUSID
			,UPDATEDAT = @UPDATEDAT
			WHERE ID = @ID
		END

	--get all the invoice by unit id
	IF @FLAG = 'A'
		BEGIN
			SELECT
			I.ID
			, I.AMOUNTDUE
			,I.FROMMONTH
			,I.TOMONTH
			,I.DUEDATE
			,I.CREATEDAT
			,I.ISVERIFIED
			,I.OWNERREMARK
			,I.RENTERREMARK
			,I.UPDATEDAT
			,I.VERIFIEDAT
			,U.FIRST_NAME +
				CASE
					WHEN MIDDLE_NAME IS NOT NULL THEN ' ' + MIDDLE_NAME
						ELSE ''
					END +
				' ' + LAST_NAME AS RENTERNAME
			,S.STATUS AS STATUS
			,M.METHOD AS PAYMENTMETHOD
			FROM TBL_PAYMENTINVOICES I
			INNER JOIN TBL_USERS U ON U.ID = I.RENTERID
			INNER JOIN TBL_PAYMENTSTATUS S ON S.ID = I.STATUSID
			INNER JOIN TBL_PAYMENTMETHOD M ON M.ID = I.PAYMENTMETHODID
			WHERE UNITID = @UNITID
			ORDER BY I.FROMMONTH ASC
		END

	--to get all the invoice of the renter( by renter id and unit id)
	IF @FLAG = 'R'
		BEGIN
			SELECT
			I.ID
			,I.AMOUNTDUE
			,I.FROMMONTH
			,I.TOMONTH
			,I.DUEDATE
			,I.CREATEDAT
			,I.ISVERIFIED
			,I.OWNERREMARK
			,I.RENTERREMARK
			,I.UPDATEDAT
			,I.VERIFIEDAT
			,U.FIRST_NAME +
				CASE
					WHEN MIDDLE_NAME IS NOT NULL THEN ' ' + MIDDLE_NAME
						ELSE ''
					END +
				' ' + LAST_NAME AS OWNERNAME
			,S.STATUS AS STATUS
			,M.METHOD AS PAYMENTMETHOD
			FROM TBL_PAYMENTINVOICES I
			INNER JOIN TBL_USERS U ON U.ID = I.OWNERID
			INNER JOIN TBL_PAYMENTSTATUS S ON S.ID = I.STATUSID
			INNER JOIN TBL_PAYMENTMETHOD M ON M.ID = I.PAYMENTMETHODID
			WHERE UNITID = @UNITID AND RENTERID = @RENTERID
			ORDER BY I.FROMMONTH ASC
		END
	--delete
	IF @FLAG = 'D'
		BEGIN
			DELETE FROM TBL_PAYMENTINVOICES WHERE ID = @ID;
		END

		--get invoice by id
	IF @FLAG = 'G'
		BEGIN
			--SELECT * FROM TBL_PAYMENTINVOICES WHERE ID = @ID;
			SELECT
			I.ID
			,I.RENTERID
			,I.UNITID
			,I.FROMMONTH
			,I.TOMONTH
			,I.DUEDATE
			,I.AMOUNTDUE
			,I.OWNERID
			,I.PAYMENTMETHODID
			,M.METHOD AS PAYMENTMETHOD
			,I.OWNERREMARK
			,I.RENTERREMARK
			,I.ISVERIFIED
			,I.VERIFIEDAT
			,I.STATUSID
			,S.STATUS AS STATUS
			,I.UPDATEDAT
			FROM TBL_PAYMENTINVOICES I
			INNER JOIN TBL_PAYMENTMETHOD M ON M.ID = I.PAYMENTMETHODID
			INNER JOIN TBL_PAYMENTSTATUS S ON S.ID = I.STATUSID
			WHERE I.ID = @ID
		END


	--select the latest month
	IF @FLAG = 'L'
		BEGIN
			SELECT TOP 1 * FROM TBL_PAYMENTINVOICES
			WHERE
			UNITID = @UNITID

			ORDER BY TOMONTH DESC
		END

	--get all payment invoice of the owned property
	IF @FLAG = 'O'
		BEGIN
			SELECT
			I.ID
			--, I.AMOUNTDUE
			,ISNULL((SELECT SUM(AMOUNT) FROM TBL_UTILITYBILLINVOICE WHERE INVOICEID = I.ID) + I.AMOUNTDUE, I.AMOUNTDUE) AS AMOUNTDUE
			,I.FROMMONTH
			,I.TOMONTH
			,I.DUEDATE
			,I.CREATEDAT
			,I.ISVERIFIED
			,I.OWNERREMARK
			,I.RENTERREMARK
			,I.UPDATEDAT
			,I.VERIFIEDAT
			,U.FIRST_NAME +
				CASE
					WHEN MIDDLE_NAME IS NOT NULL THEN ' ' + MIDDLE_NAME
						ELSE ''
					END +
				' ' + LAST_NAME AS RENTERNAME
			,S.STATUS AS STATUS
			,M.METHOD AS PAYMENTMETHOD
			FROM TBL_PAYMENTINVOICES I
			INNER JOIN TBL_USERS U ON U.ID = I.RENTERID
			INNER JOIN TBL_PAYMENTSTATUS S ON S.ID = I.STATUSID
			INNER JOIN TBL_PAYMENTMETHOD M ON M.ID = I.PAYMENTMETHODID
			WHERE OWNERID = @OWNERID
			ORDER BY I.FROMMONTH ASC
		END

	--get all payment invoice of the rented properties
	IF @FLAG = 'P'
		BEGIN
			SELECT
			I.ID
			,ISNULL((SELECT SUM(AMOUNT) FROM TBL_UTILITYBILLINVOICE WHERE INVOICEID = I.ID) + I.AMOUNTDUE, I.AMOUNTDUE) AS AMOUNTDUE
			,I.FROMMONTH
			,I.TOMONTH
			,I.DUEDATE
			,I.CREATEDAT
			,I.ISVERIFIED
			,I.OWNERREMARK
			,I.RENTERREMARK
			,I.UPDATEDAT
			,I.VERIFIEDAT
			,U.FIRST_NAME +
				CASE
					WHEN MIDDLE_NAME IS NOT NULL THEN ' ' + MIDDLE_NAME
						ELSE ''
					END +
				' ' + LAST_NAME AS OWNERNAME
			,S.STATUS AS STATUS
			,M.METHOD AS PAYMENTMETHOD
			FROM TBL_PAYMENTINVOICES I
			INNER JOIN TBL_USERS U ON U.ID = I.OWNERID
			INNER JOIN TBL_PAYMENTSTATUS S ON S.ID = I.STATUSID
			INNER JOIN TBL_PAYMENTMETHOD M ON M.ID = I.PAYMENTMETHODID
			WHERE RENTERID = @RENTERID
			ORDER BY I.FROMMONTH ASC
		END
	

	-- get the invoice creation alert for owner
	IF @FLAG = 'M'
		BEGIN
			WITH LATESTINVOICE AS (
				SELECT I.*, 
					   ROW_NUMBER() OVER (PARTITION BY I.UNITID ORDER BY I.TOMONTH DESC) AS RN
				FROM TBL_PAYMENTINVOICES I
				WHERE I.OWNERID = @OWNERID
			)
			SELECT LI.UNITID, 
				   U.NAME AS UNITNAME, 
				   LI.OWNERID, 
				   P.FIRST_NAME AS RENTERNAME, 
				   LI.TOMONTH AS PAIDTO
			FROM LatestInvoice LI
			INNER JOIN TBL_UNITS U ON U.ID = LI.UNITID
			INNER JOIN TBL_USERS P ON P.ID = LI.RENTERID
			WHERE LI.RN = 1
			  AND LI.TOMONTH <= DATEADD(DAY, -30, GETUTCDATE());
		END

	--get the due date alert for renter
	IF @FLAG = 'N'
		BEGIN
			SELECT 
				I.ID INVOICEID,
				I.UNITID UNITID,
				U.NAME AS UNITNAME, 
				P.FIRST_NAME AS OWNERNAME,
				I.RENTERID,
				I.DUEDATE, 
				CASE 
					WHEN I.DUEDATE > GETUTCDATE() THEN 0 
					ELSE 1 
				END AS ISEXPIRED
			FROM TBL_PAYMENTINVOICES I
			INNER JOIN TBL_UNITS U ON U.ID = I.UNITID
			INNER JOIN TBL_USERS P ON P.ID = I.RENTERID
			WHERE
			I.RENTERID = @RENTERID
			AND
			I.ISVERIFIED = 0
			AND 
			(
			  I.DUEDATE < GETUTCDATE()
			  OR
			  I.DUEDATE <= DATEADD(DAY, 3, GETUTCDATE())
			 )
		END

END




--payment
CREATE PROCEDURE SP_PAYMENT
@FLAG CHAR = NULL
,@ID INT = NULL
,@PAIDMONTH DATETIME = NULL
,@UNITID INT = NULL
,@PAYMENTDATE DATETIME = NULL
,@AMOUNT FLOAT = NULL
,@INVOICEID INT = NULL
AS
BEGIN
	--get all the payments using unit id
	IF @FLAG = 'A'
		BEGIN
			SELECT * FROM TBL_PAYMENT WHERE UNITID = @UNITID;
		END

	--insertion
	IF @FLAG = 'I'
		BEGIN
			INSERT INTO TBL_PAYMENT
			(
			PAIDMONTH
			,UNITID
			,PAYMENTDATE
			,AMOUNT
			,INVOICEID
			)
			VALUES
			(
			@PAIDMONTH
			,@UNITID
			,@PAYMENTDATE
			,@AMOUNT
			,@INVOICEID
			)
		END
END

--users
CREATE PROCEDURE SP_USERS
@FLAG CHAR = NULL,
@ID INT = NULL,
@FIRST_NAME VARCHAR(100) = NULL,
@MIDDLE_NAME VARCHAR(100) = NULL,
@LAST_NAME VARCHAR(100) = NULL,
@PHONE NVARCHAR(50) = NULL
AS
BEGIN
--GET INFO FOR PROFILE
	IF @FLAG = 'P'
		BEGIN
			SELECT
			U.ID
			,U.FIRST_NAME AS FIRSTNAME
			,U.MIDDLE_NAME AS MIDDLENAME
			,U.LAST_NAME AS LASTNAME
			,U.PHONE_NUMBER AS PHONENUMBER
			,A.EMAIL
			,(SELECT COUNT(*) FROM TBL_PROPERTY P WHERE P.USERID = U.ID) AS TOTALOWNEDPROPERTIES

			,(SELECT COUNT(*) FROM TBL_UNITS UT
				LEFT JOIN TBL_PROPERTY P ON P.ID = UT.PROPERTYID
				WHERE P.USERID = U.ID)
				AS TOTALOWNEDUNITS

			,(SELECT COUNT(*) FROM TBL_UNITS UT WHERE UT.RENTERID = U.ID) AS TOTALRENTEDUNITS

			,(SELECT COUNT(DISTINCT P.ID) FROM TBL_PROPERTY P
				LEFT JOIN TBL_UNITS UT ON UT.PROPERTYID = P.ID
				WHERE UT.RENTERID = U.ID)
				AS TOTALRENTEDPROPERTIES
			FROM
			TBL_USERS U
			INNER JOIN TBL_AUTHENTICATION A ON U.AUTHID = A.ID
			WHERE 
			U.ID = @ID
		END


	IF @FLAG = 'U'
		BEGIN
			UPDATE TBL_USERS
			SET
			FIRST_NAME = @FIRST_NAME
			,MIDDLE_NAME = @MIDDLE_NAME
			,LAST_NAME = @LAST_NAME
			,PHONE_NUMBER = @PHONE
			WHERE ID = @ID;
		END
END

--user image
CREATE PROCEDURE SP_USERIMAGE
@FLAG CHAR = NULL,
@ID INT = NULL,
@IMAGEDATA VARBINARY(MAX) = NULL,
@IMAGETYPE NVARCHAR(50) = NULL,
@USERID INT = NULL,
@CREATEDAT DATETIME = NULL,
@UPDATEDAT DATETIME = NULL
AS
BEGIN
	--INSERT AND UPDATE
	IF @FLAG = 'U'
		BEGIN
			IF EXISTS(SELECT 1 FROM TBL_USERIMAGE WHERE USERID = @USERID)
				BEGIN
					UPDATE TBL_USERIMAGE
					SET
					IMAGEDATA = @IMAGEDATA
					,IMAGETYPE = @IMAGETYPE
					,UPDATEDAT = GETDATE()
					WHERE USERID = @USERID
				END
			ELSE
				BEGIN
					INSERT INTO TBL_USERIMAGE
					(
					IMAGEDATA
					,IMAGETYPE
					,USERID
					,CREATEDAT
					,UPDATEDAT
					)
					VALUES
					(
					@IMAGEDATA
					,@IMAGETYPE
					,@USERID
					,GETDATE()
					,GETDATE()
					)
				END
		END

	IF @FLAG = 'G'
		BEGIN
			SELECT * FROM TBL_USERIMAGE WHERE USERID = @USERID;
		END

END

--property image
CREATE PROCEDURE SP_PROPERTYIMAGE
@FLAG CHAR = NULL,
@ID INT = NULL,
@IMAGEDATA VARBINARY(MAX) = NULL,
@IMAGETYPE NVARCHAR(50) = NULL,
@PROPERTYID INT = NULL,
@CREATEDAT DATETIME = NULL,
@UPDATEDAT DATETIME = NULL
AS
BEGIN
	--INSERT AND UPDATE
	IF @FLAG = 'U'
		BEGIN
			IF EXISTS(SELECT 1 FROM TBL_PROPERTYIMAGE WHERE PROPERTYID = @PROPERTYID)
				BEGIN
					UPDATE TBL_PROPERTYIMAGE
					SET
					IMAGEDATA = @IMAGEDATA
					,IMAGETYPE = @IMAGETYPE
					,UPADTEDAT = GETDATE()
					WHERE PROPERTYID = @PROPERTYID
				END
			ELSE
				BEGIN
					INSERT INTO TBL_PROPERTYIMAGE
					(
					IMAGEDATA
					,IMAGETYPE
					,PROPERTYID
					,CREATEDAT
					,UPADTEDAT
					)
					VALUES
					(
					@IMAGEDATA
					,@IMAGETYPE
					,@PROPERTYID
					,GETDATE()
					,GETDATE()
					)
				END
		END

	IF @FLAG = 'G'
		BEGIN
			SELECT * FROM TBL_PROPERTYIMAGE WHERE PROPERTYID = @PROPERTYID;
		END

END



--qr image
CREATE PROCEDURE SP_QRPAYMENTIMAGES
@FLAG CHAR = NULL
,@ID INT = NULL
,@IMAGEDATA VARBINARY(MAX) = NULL
,@IMAGETYPE NVARCHAR(50) = NULL
,@PAYMENTMETHODID INT = NULL
,@OWNERID INT = NULL
,@CREATEDAT DATETIME = NULL
,@UPDATEDAT DATETIME = NULL
AS
BEGIN
	--INSERTION
	IF @FLAG = 'I'
		BEGIN
			INSERT INTO TBL_QRPAYMENTIMAGES
			(
			IMAGEDATA
			,IMAGETYPE
			,PAYMENTMETHODID
			,OWNERID
			,CREATEDAT
			,UPDATEDAT
			)
			VALUES
			(
			@IMAGEDATA
			,@IMAGETYPE
			,@PAYMENTMETHODID
			,@OWNERID
			,GETDATE()
			,GETDATE()
			)
		END
	--UPDATE
	IF @FLAG = 'U'
		BEGIN
			UPDATE TBL_QRPAYMENTIMAGES
			SET
			IMAGEDATA = @IMAGEDATA
			,IMAGETYPE = @IMAGETYPE
			,UPDATEDAT = GETDATE()
			WHERE
			ID = @ID;
		END

	--DELETE
	IF @FLAG = 'D'
		BEGIN
			DELETE FROM TBL_QRPAYMENTIMAGES
			WHERE
			ID = @ID;
		END

	--GET SINGLE DATA by id
	IF @FLAG = 'S'
		BEGIN
			SELECT * FROM TBL_QRPAYMENTIMAGES
			WHERE
			ID = @ID;
		END

	--Get single data by ownerid and paymentid
	IF @FLAG = 'O'
		BEGIN
			SELECT * FROM TBL_QRPAYMENTIMAGES
			WHERE
			OWNERID = @OWNERID
			AND
			PAYMENTMETHODID = @PAYMENTMETHODID
		END

	--get all data of owner
	IF @FLAG = 'A'
		BEGIN
			SELECT Q.*, M.METHOD AS PAYMENTMETHOD FROM TBL_QRPAYMENTIMAGES Q
			INNER JOIN TBL_PAYMENTMETHOD M ON M.ID = Q.PAYMENTMETHODID 
			WHERE
			OWNERID = @OWNERID
		END

	--get all the payment method which doesn't have qr images
	IF @FLAG = 'P'
	BEGIN
		SELECT P.ID, P.METHOD AS PAYMENTMETHOD
		FROM TBL_PAYMENTMETHOD P
		LEFT JOIN TBL_QRPAYMENTIMAGES Q 
			ON Q.PAYMENTMETHODID = P.ID AND Q.OWNERID = @OWNERID
		WHERE Q.ID IS NULL
		AND P.ID <> 1
	END
END

-- payment proof
CREATE PROCEDURE SP_PAYMENTPROOF
@FLAG CHAR = NULL
,@ID INT = NULL
,@IMAGEDATA VARBINARY(MAX) = NULL
,@IMAGETYPE NVARCHAR(50) = NULL
,@PAYMENTMETHODID INT = NULL
,@INVOICEID INT = NULL
,@OWNERID INT = NULL
,@CREATEDAT DATETIME = NULL
AS
BEGIN
	--INSERTION AND UPDATE
	IF @FLAG = 'I'
	BEGIN
		IF EXISTS (SELECT 1 FROM TBL_PAYMENTPROOF WHERE INVOICEID = @INVOICEID)
			BEGIN
				UPDATE TBL_PAYMENTPROOF
				SET
				IMAGEDATA = @IMAGEDATA
				,IMAGETYPE = @IMAGETYPE
				WHERE INVOICEID = @INVOICEID
			END
		ELSE
			BEGIN
				INSERT INTO TBL_PAYMENTPROOF
				(
				IMAGEDATA
				,IMAGETYPE
				,PAYMENTMETHODID
				,OWNERID
				,INVOICEID
				)
				VALUES
				(
				@IMAGEDATA
				,@IMAGETYPE
				,@PAYMENTMETHODID
				,@OWNERID
				,@INVOICEID
				);
			END	
	END

	--DELETE
	IF @FLAG = 'D'
		BEGIN
			DELETE FROM TBL_PAYMENTPROOF
			WHERE
			ID = @ID
		END

	--GET DATA BY ID
	IF @FLAG = 'S'
		BEGIN
			SELECT
			P.*
			,M.METHOD AS PAYMENTMETHOD
			FROM TBL_PAYMENTPROOF P
			INNER JOIN TBL_PAYMENTMETHOD M ON M.ID = P.PAYMENTMETHODID
			WHERE P.ID = @ID
		END
	
	--GET DATA BY INVOICEID
	IF @FLAG = 'O'
		BEGIN
			SELECT
			P.*
			,M.METHOD AS PAYMENTMETHOD
			FROM TBL_PAYMENTPROOF P
			INNER JOIN TBL_PAYMENTMETHOD M ON M.ID = P.PAYMENTMETHODID
			WHERE P.INVOICEID = @INVOICEID 
		END
END

-- utility type
CREATE PROCEDURE SP_UTILITYTYPE
@FLAG CHAR = NULL
AS
BEGIN
	--GET ALL UTILITY TYPE
	IF @FLAG = 'A'
		BEGIN
			SELECT * FROM TBL_UTILITYBILLTYPE;
		END
END


--utility bills

CREATE PROCEDURE SP_UTILITYBILLS
@FLAG CHAR = NULL
,@ID INT = NULL
,@UTILITYTYPE INT = NULL
,@USERID INT = NULL
,@PROPERTYID INT = NULL
,@MONTH DATETIME = NULL
,@CREATEDAT DATETIME = NULL
,@TOTALUNIT INT = NULL
,@CONSUMEDUNIT INT = NULL
,@ALLOWTENENTACCESS BIT = NULL
,@AMOUNT FLOAT = NULL
,@ISPAID BIT = NULL
,@IMAGEDATA VARBINARY(MAX) = NULL
,@IMAGETYPE NVARCHAR(50) = null
,@STATUS INT = NULL OUTPUT 
AS
BEGIN
	--INSERTION
	IF @FLAG = 'I'
		BEGIN
			SET NOCOUNT ON;
			BEGIN TRY
				BEGIN TRANSACTION;

				INSERT INTO TBL_UTILITYBILL
					(
					 UTILITYTYPE
					,USERID
					,PROPERTYID
					,MONTH
					,TOTALUNIT
					,CONSUMEDUNIT
					,ALLOWTENENTACCESS
					,AMOUNT
					,ISPAID
					)
					VALUES
					(
					 @UTILITYTYPE
					,@USERID
					,@PROPERTYID
					,@MONTH
					,@TOTALUNIT
					,@CONSUMEDUNIT
					,@ALLOWTENENTACCESS
					,@AMOUNT
					,@ISPAID
					)
				DECLARE @UTILITYBILLID INT = SCOPE_IDENTITY();
					
					IF @IMAGEDATA IS NOT NULL AND @IMAGETYPE IS NOT NULL
					BEGIN

						INSERT INTO TBL_UTILITYBILLIMAGE
						(
						 IMAGEDATA
						,IMAGETYPE
						,UTILITYBILLID
						)
						VALUES
						(
						@IMAGEDATA
						,@IMAGETYPE
						,@UTILITYBILLID
						)
					END
				COMMIT TRANSACTION;
				 SET @STATUS = 1;
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
					ROLLBACK TRANSACTION;
			END CATCH
		END

	--UPDATE
		IF @FLAG = 'U'
			BEGIN
			BEGIN TRY
				BEGIN TRANSACTION;

				UPDATE TBL_UTILITYBILL
				SET
				UTILITYTYPE = @UTILITYTYPE
				,MONTH = @MONTH
				,TOTALUNIT = @TOTALUNIT
				,CONSUMEDUNIT = @CONSUMEDUNIT
				,ALLOWTENENTACCESS = @ALLOWTENENTACCESS
				,AMOUNT = @AMOUNT
				,ISPAID = @ISPAID
				WHERE ID = @ID
					
				IF @IMAGEDATA IS NOT NULL AND @IMAGETYPE IS NOT NULL
					BEGIN
						UPDATE TBL_UTILITYBILLIMAGE
						SET
						 IMAGEDATA = @IMAGEDATA
						,IMAGETYPE = @IMAGETYPE
						WHERE UTILITYBILLID = @ID
					END
				COMMIT TRANSACTION;
				 SET @STATUS = 1;
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
					ROLLBACK TRANSACTION;
			END CATCH
			END

	--DELETE
		IF @FLAG = 'D'
			BEGIN
			SET NOCOUNT ON;
			BEGIN TRY
				BEGIN TRANSACTION;
					DELETE FROM TBL_UTILITYBILLIMAGE WHERE UTILITYBILLID = @ID
					DELETE FROM TBL_UTILITYBILL WHERE ID = @ID
				COMMIT TRANSACTION;
				 SET @STATUS = 1;
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
					ROLLBACK TRANSACTION;
			END CATCH
			END

	
	--GET UTILITY BILL BY ID
		IF @FLAG = 'G'
			BEGIN
				SELECT
				B.ID
				,B.UTILITYTYPE AS UTILITYTYPEID
				,U.TYPE UTILITYTYPE
				,B.USERID
				,B.PROPERTYID
				,P.NAME AS PROPERTYNAME
				,B.TOTALUNIT
				,B.MONTH
				,B.CONSUMEDUNIT
				,B.AMOUNT
				,B.ISPAID
				,B.CREATEDAT
				,P.NAME
				FROM TBL_UTILITYBILL B
				INNER JOIN TBL_PROPERTY P ON P.ID = B.PROPERTYID
				INNER JOIN TBL_UTILITYBILLTYPE U ON U.ID = B.UTILITYTYPE
				WHERE B.ID = @ID
			END

	--GET ALL UTILITY BILLS OF PROPERTY OWNER
		IF @FLAG = 'A'
			BEGIN
				SELECT
				B.ID
				,B.UTILITYTYPE AS UTILITYTYPEID
				,U.TYPE UTILITYTYPE
				,B.USERID
				,B.PROPERTYID
				,P.NAME AS PROPERTYNAME
				,B.TOTALUNIT
				,B.MONTH
				,B.CONSUMEDUNIT
				,B.AMOUNT
				,B.ISPAID
				,B.CREATEDAT
				,P.NAME
				FROM TBL_UTILITYBILL B
				INNER JOIN TBL_PROPERTY P ON P.ID = B.PROPERTYID
				INNER JOIN TBL_UTILITYBILLTYPE U ON U.ID = B.UTILITYTYPE
				WHERE B.USERID = @USERID
			END
		
		--GET ALL UTILITLY BILLS OF PROPERTY FOR RENTER
		IF @FLAG = 'R'
			SELECT
				B.ID
				,B.UTILITYTYPE AS UTILITYTYPEID
				,U.TYPE UTILITYTYPE
				,B.PROPERTYID
				,P.NAME AS PROPERTYNAME
				,B.MONTH
				,B.CREATEDAT
				,P.NAME
				FROM TBL_UTILITYBILL B
				INNER JOIN TBL_PROPERTY P ON P.ID = B.PROPERTYID
				INNER JOIN TBL_UTILITYBILLTYPE U ON U.ID = B.UTILITYTYPE
				WHERE 
				EXISTS
				(
					SELECT 1 
					FROM TBL_UNITS UT 
					WHERE UT.PROPERTYID = P.ID 
					AND UT.RENTERID = @USERID
				)
					AND B.ALLOWTENENTACCESS = 1

END

--utility bill image
CREATE PROCEDURE SP_UTILITYBILLIMAGE
@FLAG CHAR = NULL
,@ID INT = NULL
,@UTILITYBILLID INT = NULL
,@IMAGEDATA VARBINARY(MAX) = NULL
,@IMAGETYPE NVARCHAR(50) = NULL
,@CREATEDAT DATETIME = NULL
AS
BEGIN
	--INSERTION
	IF @FLAG = 'I'
		BEGIN
			INSERT INTO TBL_UTILITYBILLIMAGE
			(
			 UTILITYBILLID
			 ,IMAGEDATA
			 ,IMAGETYPE
			)
			VALUES
			(
			 @UTILITYBILLID
			 ,@IMAGEDATA
			 ,@IMAGETYPE
			)
		END

	--UPDATE
	IF @FLAG = 'U'
		BEGIN
			UPDATE TBL_UTILITYBILLIMAGE
			SET
			IMAGEDATA = @IMAGEDATA
			,IMAGETYPE = @IMAGETYPE
			WHERE ID = @ID
		END
	--DELETE
	IF @FLAG = 'D'
		BEGIN
			DELETE FROM TBL_UTILITYBILLIMAGE
			WHERE 
			ID = @ID;
		END

	--GET IMAGE
	IF @FLAG = 'G'
		BEGIN
			SELECT * FROM TBL_UTILITYBILLIMAGE
			WHERE ID = @ID
			OR
			UTILITYBILLID = @UTILITYBILLID
		END
END


--utility bill invoice

CREATE PROCEDURE SP_UTILITYBILLINVOICE
@FLAG CHAR = NULL
,@ID INT = NULL
,@UTILITYTYPEID INT = NULL
,@INVOICEID INT = NULL
,@CONSUMEDUNIT INT = NULL
,@AMOUNT FLOAT = NULL
,@CREATEDAT VARCHAR(50) = NULL
AS
BEGIN
	--INSERTION
		IF @FLAG = 'I'
			BEGIN
				INSERT INTO TBL_UTILITYBILLINVOICE
				(
					INVOICEID
					,UTILITYTYPEID
					,CONSUMEDUNIT
					,AMOUNT
				)
				VALUES
				(
					@INVOICEID
					,@UTILITYTYPEID
					,@CONSUMEDUNIT
					,@AMOUNT
				)
			END
	--UPDATE
		IF @FLAG = 'U'
			BEGIN
				UPDATE TBL_UTILITYBILLINVOICE
				SET
				CONSUMEDUNIT = @CONSUMEDUNIT
				,AMOUNT = @AMOUNT
				WHERE ID = @ID OR INVOICEID = @INVOICEID
			END

	--DELETE
		IF @FLAG = 'D'
			BEGIN
				DELETE FROM TBL_UTILITYBILLINVOICE WHERE INVOICEID = @INVOICEID OR ID = @ID
			END

	--GET UTITILY BILL INVOICE BY INVOICEID
		IF @FLAG = 'P'
			BEGIN
				SELECT
				I.ID
				,I.INVOICEID
				,I.UTILITYTYPEID
				,I.CONSUMEDUNIT
				,I.AMOUNT
				,T.TYPE UTILITYTYPENAME
				FROM TBL_UTILITYBILLINVOICE I
				INNER JOIN TBL_UTILITYBILLTYPE T ON T.ID = I.UTILITYTYPEID
				WHERE INVOICEID = @INVOICEID;
			END
END
