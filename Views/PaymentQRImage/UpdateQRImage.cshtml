@model TenentManagement.Models.Payment.PaymentQRImageModel
@{
    ViewData["Title"] = "Update QR Image";
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">Update QR Code for @Model.PaymentMethod</h4>
                </div>
                <div class="card-body">
                    <form asp-action="UpdateQRImage" asp-controller="PaymentQRImage" method="post" enctype="multipart/form-data" id="qrEditForm">
                        <input type="hidden" asp-for="Id" />
                        <input type="hidden" asp-for="PaymentMethodId" />
                        <input type="hidden" asp-for="Base64Image" id="currentImage" />
                        <input type="hidden" asp-for="ImageData" />
                        <input type="hidden" asp-for="ImageType" />

                        <div class="mb-4">
                            <label class="form-label fw-bold">Current QR Code</label>
                            <div class="text-center">
                                <img src="@Model.Base64Image" class="img-fluid rounded mb-3" style="max-height: 200px;" id="currentQrImage" />
                                <p class="text-muted small">Current image will be replaced if you upload a new one</p>
                            </div>
                        </div>

                        <div class="mb-4">
                            <label class="form-label fw-bold">New QR Code Image</label>
                            <div class="border rounded p-3 text-center" id="imageUploadArea">
                                <div id="imagePreviewContainer" class="mb-3 d-none">
                                    <img id="imagePreview" class="img-fluid rounded" style="max-height: 200px;" />
                                    <br />
                                    <button type="button" class="btn btn-lg text-danger mt-2" id="removeImageBtn" title="Delete QR image">
                                        <i class="bi bi-x-lg"></i>
                                    </button>
                                </div>
                                <div id="uploadPrompt" class="py-4">
                                    <i class="bi bi-cloud-upload display-4 text-muted"></i>
                                    <p class="mt-2 mb-1">Drag & drop your new QR code image here or</p>
                                    <input type="file" name="imageFile" id="imageFile" class="d-none" accept="image/*" />
                                    <label for="imageFile" class="btn btn-outline-primary">
                                        <i class="bi bi-folder2-open"></i> Browse Files
                                    </label>
                                    <p class="small text-muted mt-2">Supports: JPG, PNG (Max 5MB)</p>
                                </div>
                            </div>
                            <span id="clientFileError" class="text-danger small d-none mt-2"></span>
                        </div>

                        <input type="hidden" asp-for="OwnerId" />

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary btn-lg submit-btn" disabled>
                                <i class="bi bi-save"></i> Save Changes
                            </button>
                            <a asp-action="ManageQRImage" asp-controller="PaymentQRImage" asp-route-ownerId="@Model.OwnerId" class="btn btn-outline-secondary">
                                <i class="bi bi-arrow-left"></i> Cancel
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const imageFile = document.getElementById('imageFile');
            const imagePreview = document.getElementById('imagePreview');
            const imagePreviewContainer = document.getElementById('imagePreviewContainer');
            const uploadPrompt = document.getElementById('uploadPrompt');
            const removeImageBtn = document.getElementById('removeImageBtn');
            const imageUploadArea = document.getElementById('imageUploadArea');
            const clientFileError = document.getElementById('clientFileError');
            const submitBtn = document.querySelector('.submit-btn');
            const currentImage = document.getElementById('currentImage');
            const currentQrImage = document.getElementById('currentQrImage');
            const form = document.getElementById('qrEditForm');

            // Check if form should be submittable
            function checkFormState() {
                const hasNewImage = imageFile.files && imageFile.files.length > 0;
                submitBtn.disabled = !hasNewImage;
            }

            // Handle file selection
            imageFile.addEventListener('change', function(e) {
                if (this.files && this.files[0]) {
                    const file = this.files[0];

                    // Reset previous errors
                    clientFileError.classList.add('d-none');
                    clientFileError.textContent = '';

                    // Validate file size (5MB max)
                    if (file.size > 5 * 1024 * 1024) {
                        showClientError('File size exceeds 5MB limit');
                        this.value = '';
                        checkFormState();
                        return;
                    }

                    // Validate file type
                    if (!file.type.match('image.*')) {
                        showClientError('Please select an image file (JPG or PNG)');
                        this.value = '';
                        checkFormState();
                        return;
                    }

                    const reader = new FileReader();
                    reader.onload = function(e) {
                        imagePreview.src = e.target.result;
                        imagePreviewContainer.classList.remove('d-none');
                        uploadPrompt.classList.add('d-none');
                        checkFormState();
                    }
                    reader.readAsDataURL(file);
                } else {
                    checkFormState();
                }
            });

            // Handle drag and drop
            imageUploadArea.addEventListener('dragover', function(e) {
                e.preventDefault();
                this.classList.add('border-primary');
            });

            imageUploadArea.addEventListener('dragleave', function(e) {
                e.preventDefault();
                this.classList.remove('border-primary');
            });

            imageUploadArea.addEventListener('drop', function(e) {
                e.preventDefault();
                this.classList.remove('border-primary');

                if (e.dataTransfer.files.length) {
                    imageFile.files = e.dataTransfer.files;
                    const event = new Event('change');
                    imageFile.dispatchEvent(event);
                }
            });

            // Remove image
            removeImageBtn.addEventListener('click', function() {
                imageFile.value = '';
                imagePreview.src = '';
                imagePreviewContainer.classList.add('d-none');
                uploadPrompt.classList.remove('d-none');
                clientFileError.classList.add('d-none');
                clientFileError.textContent = '';
                checkFormState();
            });

            function showClientError(message) {
                clientFileError.textContent = message;
                clientFileError.classList.remove('d-none');
                imageUploadArea.classList.add('border-danger');
                setTimeout(() => {
                    imageUploadArea.classList.remove('border-danger');
                }, 2000);
            }

            // Prevent form submission if no image is selected
            form.addEventListener('submit', function(e) {
                if (!imageFile.files || imageFile.files.length === 0) {
                    e.preventDefault();
                    showClientError('Please select an image to upload');
                }
            });

            // Initialize form state
            checkFormState();
        });
    </script>

    <style>
        #imageUploadArea {
            transition: all 0.3s ease;
            cursor: pointer;
            border: 2px dashed #dee2e6;
        }

            #imageUploadArea:hover {
                border-color: #0d6efd;
                background-color: rgba(13, 110, 253, 0.05);
            }

            #imageUploadArea.border-primary {
                border-color: #0d6efd !important;
                background-color: rgba(13, 110, 253, 0.05) !important;
            }

            #imageUploadArea.border-danger {
                border-color: #dc3545 !important;
                background-color: rgba(220, 53, 69, 0.05) !important;
            }

        .submit-btn:disabled {
            opacity: 0.65;
            cursor: not-allowed;
        }
    </style>
}