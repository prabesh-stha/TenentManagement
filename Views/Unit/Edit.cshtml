@model TenentManagement.Models.Property.Unit.UnitModel

@{
    ViewData["Title"] = "Edit Unit";
    bool hasDuration = false;
}

<div class="container mt-5">
    <div class="card shadow-lg mx-auto" style="max-width: 700px;">
        <div class="card-header bg-primary text-white">
            <h4 class="mb-0"><i class="bi bi-house-gear me-2"></i>Edit Unit</h4>
        </div>
        <div class="card-body p-4">
            <form asp-action="Edit" method="post" id="unitForm">
                <input type="hidden" asp-for="Id" />

                <!-- Unit Name -->
                <div class="mb-3">
                    <label asp-for="Name" class="form-label">Unit Name *</label>
                    <input asp-for="Name" class="form-control" />
                    <span asp-validation-for="Name" class="text-danger small"></span>
                </div>

                <!-- Description -->
                <div class="mb-3">
                    <label asp-for="Description" class="form-label">Description *</label>
                    <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                    <span asp-validation-for="Description" class="text-danger small"></span>
                </div>

                <!-- Occupancy -->
                <div class="mb-3">
                    <label class="form-label">Occupancy Status *</label>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="IsVacant" id="vacantTrue" value="true"
                        @(Model.IsVacant ? "checked" : "") />
                        <label class="form-check-label" for="vacantTrue">Vacant</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="IsVacant" id="vacantFalse" value="false"
                        @(!Model.IsVacant ? "checked" : "") />
                        <label class="form-check-label" for="vacantFalse">Occupied</label>
                    </div>
                </div>

                <!-- Renter Fields (Shown only if Occupied) -->
                <div id="renterFields" style="display: @(Model.IsVacant ? "none" : "block")">
                    <div id="renterSection" class="mb-3">
                        <label asp-for="RenterUsername" class="form-label">Renter Username / email</label>
                        <div class="input-group">
                            <input asp-for="RenterUsername" id="usernameInput" class="form-control"
                                   value="@Model.RenterUsername" placeholder="Enter renter's username or email" />
                            <span class="input-group-text" id="usernameStatusIcon"><i class="bi"></i></span>
                        </div>
                        <small id="usernameValidationMsg" class="form-text"></small>
                        <small id="renterValidationMessage" class="text-danger d-none">
                            Please enter a valid renter before submitting.
                        </small>
                    </div>

                    <div class="mb-3">
                        <label asp-for="RentAmount" class="form-label">Rent Amount *</label>
                        <input asp-for="RentAmount" id="RentAmount" type="number" step="1000"
                               class="form-control" value="@Model.RentAmount" />
                        <span asp-validation-for="RentAmount" class="text-danger small"></span>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label asp-for="RentStartDate" class="form-label">Rent Start Date</label>
                            <input asp-for="RentStartDate" id="RentStartDate" type="date" class="form-control" readonly/>
                            
                        </div>
                        <div class="col-md-6 mb-3">
                            <label asp-for="RentEndDate" class="form-label">Current Rent End Date</label>
                            <input asp-for="RentEndDate" id="RentEndDate" type="date" class="form-control" readonly />
                        </div>

                    </div>
                    <!-- Add Rent Month Button -->
                    <div class="mb-3">
                        <button type="button" id="toggleDurationBtn" class="btn @(hasDuration ? "btn-danger" : "btn-outline-primary")">
                            <i class="bi @(hasDuration ? "bi-calendar-x" : "bi-calendar-plus") me-2"></i>
                            @(hasDuration ? "Remove Rent Month" : "Add Rent Month")
                        </button>
                    </div>
                    <div id="rentDurationSection" style="display: none">
                        <div class="mb-3">
                            <label asp-for="RentDurationMonths" class="form-label">Rent Duration (Months) *</label>
                            <input asp-for="RentDurationMonths" id="RentDurationMonths" type="number" min="0" max="120"
                                   class="form-control" value="1" />
                            <span asp-validation-for="RentDurationMonths" class="text-danger small"></span>
                            <small id="endDatePreview" class="form-text text-muted"></small>
                        </div>

                        <!-- Quick Add Months Buttons -->
                        <div class="row mb-3">
                            <div class="col-12">
                                <div class="btn-group w-100" role="group">
                                    <button type="button" class="btn btn-outline-secondary add-months" data-months="1">+1 Month</button>
                                    <button type="button" class="btn btn-outline-secondary add-months" data-months="3">+3 Months</button>
                                    <button type="button" class="btn btn-outline-secondary add-months" data-months="6">+6 Months</button>
                                    <button type="button" class="btn btn-outline-secondary add-months" data-months="12">+1 Year</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <input type="hidden" asp-for="RenterId" />
                <input type="hidden" asp-for="PropertyId" />


                <div class="d-flex justify-content-between mt-4">
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-save me-2"></i>Save Changes
                    </button>
                    <a asp-action="Detail" asp-controller="Property" asp-route-id="@Model.PropertyId" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left me-2"></i>Back to List
                    </a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const vacantRadio = document.getElementById("vacantTrue");
        const occupiedRadio = document.getElementById("vacantFalse");
        const renterFields = document.getElementById("renterFields");
        const rentDurationSection = document.getElementById("rentDurationSection");
        const toggleDurationBtn = document.getElementById("toggleDurationBtn");
        const renterIdInput = document.getElementById("RenterId");
        const rentAmountInput = document.getElementById("RentAmount");
        const rentStartDateInput = document.getElementById("RentStartDate");
        const rentEndDateInput = document.getElementById("RentEndDate");
        const renterUsernameInput = document.getElementById("usernameInput");
        const validationMsg = document.getElementById("renterValidationMessage");

        function toggleRenterFields() {
            if (occupiedRadio.checked) {
                renterFields.style.display = "block";
            } else {
                renterFields.style.display = "none";
                validationMsg.classList.add("d-none");
                renterUsernameInput.classList.remove("is-invalid");
            }
        }
        function toggleDurationSection() {
            const isVisible = rentDurationSection.style.display === "block";

            if (isVisible) {
                document.getElementById('RentDurationMonths').value = 0;
                rentDurationSection.style.display = "none";
                toggleDurationBtn.innerHTML = `<i class="bi bi-calendar-plus me-2"></i>Add Rent Month`;
                toggleDurationBtn.classList.remove("btn-danger");
                toggleDurationBtn.classList.add("btn-outline-primary");
            } else {
                document.getElementById('RentDurationMonths').value = 1;
                rentDurationSection.style.display = "block";
                toggleDurationBtn.innerHTML = `<i class="bi bi-calendar-x me-2"></i>Remove Rent Month`;
                toggleDurationBtn.classList.remove("btn-outline-primary");
                toggleDurationBtn.classList.add("btn-danger");
                updateEndDatePreview();
            }
        }
        toggleDurationBtn.addEventListener("click", toggleDurationSection);
        vacantRadio.addEventListener("change", toggleRenterFields);
        occupiedRadio.addEventListener("change", toggleRenterFields);

        // Hide error on input focus
        renterUsernameInput.addEventListener("focus", function () {
            validationMsg.classList.add("d-none");
            renterUsernameInput.classList.remove("is-invalid");
        });

        // Validate before submit
        document.getElementById("unitForm").addEventListener("submit", function (e) {
            if (occupiedRadio.checked) {
                const renterId = renterIdInput.value.trim();
                if (!renterId || renterId === "0") {
                    e.preventDefault();
                    validationMsg.classList.remove("d-none");
                    renterUsernameInput.classList.add("is-invalid");
                    return;
                }
            }

            // Hide validation if valid
            validationMsg.classList.add("d-none");
            renterUsernameInput.classList.remove("is-invalid");
        });

        // Initialize the view based on current state
        document.addEventListener("DOMContentLoaded", function() {
            toggleRenterFields();
        });

                // Month addition functionality
        document.querySelectorAll('.add-months').forEach(button => {
            button.addEventListener('click', function() {
                const monthsToAdd = parseInt(this.dataset.months);
                const currentMonths = parseInt(document.getElementById('RentDurationMonths').value) || 0;
                document.getElementById('RentDurationMonths').value = currentMonths + monthsToAdd;
                updateEndDatePreview();
            });
        });

        // Update end date preview
        function updateEndDatePreview() {
            const startDate = new Date(document.getElementById('RentEndDate').value);
            const months = parseInt(document.getElementById('RentDurationMonths').value) || 1;

            if (!isNaN(startDate.getTime())) {
                const endDate = new Date(startDate);
                endDate.setMonth(endDate.getMonth() + months);

                // Format date for display
                const options = { year: 'numeric', month: 'numeric', day: 'numeric' };
                document.getElementById('endDatePreview').textContent =
                    `New lease will end on: ${endDate.toLocaleDateString('en-US', options)}`;
            }
        }

        // Initialize and add event listeners
        document.getElementById('RentStartDate').addEventListener('change', updateEndDatePreview);
        document.getElementById('RentDurationMonths').addEventListener('input', updateEndDatePreview);

        // Initialize based on current model state
        if (!@Json.Serialize(Model.IsVacant)) {
            updateEndDatePreview();
        }
    </script>
}