@model TenentManagement.Models.Property.Unit.UnitModel

@{
    ViewData["Title"] = "Add Unit";
}

<div class="container mt-5">
    <div class="card shadow-lg mx-auto" style="max-width: 700px;">
        <div class="card-header bg-primary text-white">
            <h4 class="mb-0"><i class="bi bi-house-add me-2"></i>Add Unit</h4>
        </div>
        <div class="card-body p-4">
            <form asp-action="Create" method="post" id="unitForm">

                <!-- Unit Name -->
                <div class="mb-3">
                    <label asp-for="Name" class="form-label">Unit Name *</label>
                    <input asp-for="Name" class="form-control" />
                    <span asp-validation-for="Name" class="text-danger small"></span>
                </div>

                <!-- Description -->
                <div class="mb-3">
                    <label asp-for="Description" class="form-label">Description *</label>
                    <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                    <span asp-validation-for="Description" class="text-danger small"></span>
                </div>

                <!-- Occupancy -->
                <div class="mb-3">
                    <label class="form-label">Occupancy Status *</label>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="IsVacant" value="true" id="vacantTrue" checked />
                        <label class="form-check-label" for="vacantTrue">Vacant</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="IsVacant" value="false" id="vacantFalse" />
                        <label class="form-check-label" for="vacantFalse">Occupied</label>
                    </div>
                </div>

                <!-- Renter Fields (Shown only if Occupied) -->
                <div id="renterFields" style="display: none;">
                    <div id="renterSection" class="mb-3">
                        <label asp-for="RenterUsername" class="form-label">Renter Username / email</label>
                        <div class="input-group">
                            <input asp-for="RenterUsername" id="usernameInput" class="form-control" placeholder="Enter renter's username or email" />
                            <span class="input-group-text" id="usernameStatusIcon"><i class="bi"></i></span>
                        </div>
                        <small id="usernameValidationMsg" class="form-text"></small>
                        <small id="renterValidationMessage" class="text-danger d-none">
                            Please enter a valid renter before submitting.
                        </small>

                    </div>

                    <div class="mb-3">
                        <label asp-for="RentAmount" class="form-label">Rent Amount *</label>
                        <input asp-for="RentAmount" id="RentAmount" type="number" step="1000" class="form-control" />
                        <span asp-validation-for="RentAmount" class="text-danger small"></span>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label asp-for="RentStartDate" class="form-label">Rent Start Date *</label>
                            <input asp-for="RentStartDate" id="RentStartDate" type="date" class="form-control" />
                        </div>
                        <div class= "col-md-6 mb-3" >
                        <label asp-for= "RentDurationMonths" class= "form-label" > Rent Duration(Months) *</label >
                        <input asp-for= "RentDurationMonths" id = "RentDurationMonths" type = "number" min = "1" max = "120"
                        class= "form-control" value = "@(Model.RentDurationMonths)" />
                        <span asp-validation-for= "RentDurationMonths" class= "text-danger small" ></span >
                        <small id = "endDatePreview" class= "form-text text-muted" ></small >
                        </div >
                    </div>

                    <div class="row mb-3">
                        <div class="col-12">
                            <div class="btn-group w-100" role="group">
                                <button type="button" class="btn btn-outline-secondary add-months" data-months="1">+1 Month</button>
                                <button type="button" class="btn btn-outline-secondary add-months" data-months="3">+3 Months</button>
                                <button type="button" class="btn btn-outline-secondary add-months" data-months="6">+6 Months</button>
                                <button type="button" class="btn btn-outline-secondary add-months" data-months="12">+1 Year</button>
                            </div>
                        </div>
                    </div>
                </div>


                <input type="hidden" asp-for="RenterId" />
                <input type="hidden" asp-for="PropertyId" />
                <input type = "hidden" asp-for= "RentEndDate" />

                <button type="submit" class="btn rounded-corner btn-primary w-100 mt-3">
                    <i class="bi bi-plus-circle me-2"></i>Create Unit
                </button>
                <a asp-controller="Property" asp-action="Detail" asp-route-id="@Model.PropertyId" class="btn btn-outline-secondary w-100 rounded-corner mt-2">Back to Property</a>
            </form>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        const vacantRadio = document.getElementById("vacantTrue");
        const occupiedRadio = document.getElementById("vacantFalse");
        const renterFields = document.getElementById("renterFields");

        const renterIdInput = document.getElementById("RenterId");
        const rentAmountInput = document.getElementById("RentAmount");
        const rentStartDateInput = document.getElementById("RentStartDate");
        const rentEndDateInput = document.getElementById("RentEndDate");
        const renterUsernameInput = document.getElementById("usernameInput");
        const validationMsg = document.getElementById("renterValidationMessage");


        function toggleRenterFields() {
            if (occupiedRadio.checked) {
                renterFields.style.display = "block";
                document.getElementById('RentStartDate').value = new Date().toISOString().split('T')[0];
                document.getElementById('RentDurationMonths').value = 1;
                updateEndDatePreview();
            } else {
                renterFields.style.display = "none";
                document.getElementById('RentDurationMonths').value = 1;
                validationMsg.classList.add("d-none");
                renterUsernameInput.classList.remove("is-invalid");
            }
        }

        vacantRadio.addEventListener("change", toggleRenterFields);
        occupiedRadio.addEventListener("change", toggleRenterFields);
        window.addEventListener("DOMContentLoaded", toggleRenterFields);



        // Validate before submit
        document.getElementById("unitForm").addEventListener("submit", function (e) {
            if (occupiedRadio.checked) {
                const renterId = renterIdInput.value.trim();
                if (!renterId || renterId === "0") {
                    e.preventDefault();
                    validationMsg.classList.remove("d-none");
                    renterUsernameInput.classList.add("is-invalid");
                    return;
                }
            }

            // Hide validation if valid
            validationMsg.classList.add("d-none");
            renterUsernameInput.classList.remove("is-invalid");
        });
        document.querySelectorAll('.add-months').forEach(button => {
            button.addEventListener('click', function() {
                const monthsToAdd = parseInt(this.dataset.months);
                const currentMonths = parseInt(document.getElementById('RentDurationMonths').value) || 0;
                document.getElementById('RentDurationMonths').value = currentMonths + monthsToAdd;
                updateEndDatePreview();
                });
         });
                         // Update end date preview
                function updateEndDatePreview()
                {
                    const startDate = new Date(document.getElementById('RentStartDate').value);
                    const months = parseInt(document.getElementById('RentDurationMonths').value) || 1;

                    if (!isNaN(startDate.getTime()))
                    {
                        const endDate = new Date(startDate);
                        endDate.setMonth(endDate.getMonth() + months);

                        // Format date for display
                        const options = { year: 'numeric', month: 'numeric', day: 'numeric' };
        document.getElementById('endDatePreview').textContent =
                            `Lease will end on: ${ endDate.toLocaleDateString('en-US', options)}`;

        // Update hidden RentEndDate field
        document.getElementById('RentEndDate').value = endDate.toISOString().split('T')[0];
                    }
                }

                // Initialize and add event listeners
                document.getElementById('RentStartDate').addEventListener('change', updateEndDatePreview);
        document.getElementById('RentDurationMonths').addEventListener('input', updateEndDatePreview);

        // Initialize based on current model state
        if (!@Json.Serialize(Model.IsVacant))
        {
            updateEndDatePreview();
        }
    </script>
}