@model TenentManagement.Models.Payment.PaymentInvoiceModel
@using TenentManagement.Services.Utilities
@{
	ViewData["Title"] = "Renter Payment Invoice";
	var all = ViewData["All"] as bool? ?? false;

}

<div class="container py-5">
	<div class="card shadow-lg mx-auto rounded-corner" style="max-width: 700px;">
		<div class="card-header bg-primary text-white py-4 rounded-corner-top">
			<h1 class="h4 mb-0 text-center d-flex flex-column align-items-center">
				<span class="d-inline-flex align-items-center justify-content-center bg-opacity-25 bg-info text-white rounded-circle mb-2" style="width: 50px; height: 50px;">
					<i class="bi bi-receipt"></i>
				</span>
				<span>Tenant Management System</span>
				<span class="mt-2 mb-0 text-center">
					<i class="bi bi-plus-circle-fill me-2"></i>Renter Payment Invoice
				</span>
			</h1>
		</div>

		<div class="card-body p-4">
			<form method="post" asp-action="RenterInvoicePayment" asp-controller="PaymentInvoice" class="needs-validation" novalidate method="post" enctype="multipart/form-data">
				<input type="hidden" asp-for="UnitId" />
				<input type="hidden" asp-for="RenterId" />
				<input type="hidden" asp-for="OwnerId" />
				<input type="hidden" asp-for="FromMonth" id="FromMonth" />
				<input type="hidden" asp-for="ToMonth" id="ToMonth" />
				<input type="hidden" asp-for="StatusId" />
				<input type="hidden" asp-for="PaymentMethodId" />
				<input type="hidden" name="all" value="@all.ToString()" />

				<div class="row mb-3">

					<div class="col-md-6">
						<label class="form-label small text-muted">From Month *</label>
						<select class="form-control" disabled>
							@{
								<option value="@Model.FromMonth.ToString("yyyy-MM-01")" selected>@Model.FromMonth.ToString("yyyy MMMM")</option>

							}


						</select>
					</div>

					<div class="col-md-6">
						<label class="form-label small text-muted">To Month *</label>
						<select asp-for="ToMonth" id="ToMonth" class="form-control" disabled>
							<option value="@Model.ToMonth.ToString("yyyy-MM-01")" selected>@Model.ToMonth.ToString("yyyy MMMM")</option>
						</select>

					</div>
				</div>

				<div class="row mb-3">
					<div class="col-md-6">
						<label class="form-label small text-muted">Amount Per Month *</label>
						<div class="input-group">
							<span class="input-group-text">Rs.</span>
							<input asp-for="AmountPerMonth" class="form-control" id="AmountPerMonth" placeholder="e.g. 10000" readonly />
						</div>
					</div>

					<div class="col-md-6">
						<label class="form-label small text-muted">Total Amount</label>
						<div class="input-group">
							<span class="input-group-text">Rs</span>
							<input asp-for="AmountDue" type="text" class="form-control" id="TotalAmountDisplay" readonly />
						</div>
					</div>
				</div>

				<div class="mb-3">
					<label asp-for="DueDate" class="form-label">Rent Due Date *</label>
					<input asp-for="DueDate" id="DueDate" type="date" class="form-control" readonly/>
				</div>

				<div class="mb-3">
					<label asp-for="OwnerRemark" class="form-label small text-muted"></label>
					<textarea asp-for="OwnerRemark" class="form-control" placeholder="" rows="3" readonly></textarea>
					<span asp-validation-for="OwnerRemark" class="text-danger small"></span>
				</div>
				<div class="mb-3">
					<label asp-for="RenterRemark" class="form-label small text-muted"></label>
					<textarea asp-for="RenterRemark" class="form-control" placeholder="Anything to add?" rows="3"></textarea>
					<span asp-validation-for="RenterRemark" class="text-danger small"></span>
				</div>
				@if (Model.PaymentQRImage != null)
				{
					<div class="mb-3">
						<label class="form-label small text-muted">
							@Model.PaymentMethod.ToTitleCase() QR
						</label>
						<div class="text-center">
							<img src="@Model.PaymentQRImage.Base64Image"
							width="250"
							height="250"
							alt="@Model.PaymentMethod QR image"
							class="img-thumbnail" />
						</div>
					</div>
				}
				@if (Model.PaymentProof != null)
				{
					<div class="mb-4">
						<label class="form-label small text-muted">@Model.PaymentMethod.ToTitleCase() Payment Proof</label>
						<div class="border rounded p-3 bg-light">
							<div class="text-center mb-3">
								<img src="@Model.PaymentProof.Base64Image"
								class="img-fluid rounded shadow-sm"
								style="max-height: 300px;"
								alt="@Model.PaymentMethod.ToTitleCase() Payment Proof" />
							</div>
							<div class="d-flex justify-content-center gap-2">
								<button type="button" class="btn btn-sm btn-outline-primary"
								data-bs-toggle="modal"
								data-bs-target="#proofModal">
									<i class="bi bi-zoom-in me-1"></i> View Larger
								</button>
								<a href="@Model.PaymentProof.Base64Image"
								download="payment-proof-@DateTime.UtcNow.ToString("yyyyMMdd")"
								class="btn btn-sm btn-outline-secondary">
									<i class="bi bi-download me-1"></i> Download
								</a>
							</div>
						</div>
					</div>
				}


				<div class="mb-4">
					<label class="form-label small text-muted">Upload Payment Proof</label>
					<div class="border rounded p-3 text-center" id="imageUploadArea">
						<div id="imagePreviewContainer" class="mb-3 d-none">
							<img id="imagePreview" class="img-fluid rounded" style="max-height: 500px;" />
							<br />
							<button type="button" class="btn btn-lg text-danger mt-2" id="removeImageBtn" title="Delete Payment Proof">
								<i class="bi bi-x-lg"></i> 
							</button>
						</div>
						<div id="uploadPrompt" class="py-4">
							<i class="bi bi-cloud-upload display-4 text-muted"></i>
							<p class="mt-2 mb-1">Drag & drop your payment proof image here or</p>
							<input type="file" name="imageFile" id="imageFile" class="d-none" accept="image/*" required />
							<label for="imageFile" class="btn btn-outline-primary">
								<i class="bi bi-folder2-open"></i> Browse Files
							</label>
							<p class="small text-muted mt-2">Supports: JPG, PNG</p>
						</div>
					</div>
					<span id="clientFileError" class="text-danger small d-none mt-2"></span>
				</div>

				<div class="d-grid gap-2">
					<button type="submit" class="btn btn-primary btn-lg submit-btn" disabled>
						<i class="bi bi-upload"></i> Request Payment Invoice
					</button>
					@if (all)
					{
						<a asp-action="AllInvoice" asp-route-id="@Context.Session.GetInt32("UserId")" asp-route-tab="rented" class="btn btn-outline-secondary py-2 rounded-corner">
							<i class="bi bi-arrow-left me-2"></i>Back to Invoices
						</a>
					}
					else
					{
						<a asp-action="RenterInvoices" asp-controller="PaymentInvoice" asp-route-unitId="@Model.UnitId" asp-route-renterId="@Model.RenterId" class="btn btn-outline-secondary py-2 rounded-corner"><i class="bi bi-arrow-left me-2"></i>Back to Invoices</a>
					}
				</div>
			</form>
		</div>
	</div>
</div>


<!-- Payment Proof Modal -->
<div class="modal fade" id="proofModal" tabindex="-1" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered modal-lg">
		<div class="modal-content border-0 shadow">
			<div class="modal-header bg-primary text-white">
				<h5 class="modal-title">
					<i class="bi bi-receipt me-2"></i> Payment Proof
				</h5>
				<button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body text-center p-4">
				<div class="d-flex justify-content-center">
					<img src="@Model.PaymentProof?.Base64Image"
						 class="img-fluid rounded"
						 style="max-height: 70vh;"
						 alt="Payment Proof" />
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
				<a href="@Model.PaymentProof?.Base64Image"
				   download="payment-proof-@DateTime.UtcNow.ToString("yyyyMMdd")"
				   class="btn btn-primary">
					<i class="bi bi-download me-1"></i> Download
				</a>
			</div>
		</div>
	</div>
</div>

@section Scripts {
	<script>
		function calculateTotal() {
			const from = new Date(document.getElementById("FromMonth").value);
			const to = new Date(document.getElementById("ToMonth").value);
			const amount = parseFloat(document.getElementById("AmountPerMonth").value);

			if (!isNaN(from) && !isNaN(to) && !isNaN(amount)) {
				const months = (to.getFullYear() - from.getFullYear()) * 12 + (to.getMonth() - from.getMonth());
				if (months > 0) {
					document.getElementById("TotalAmountDisplay").value = (months * amount).toFixed(2);
				} else {
					document.getElementById("TotalAmountDisplay").value = "0.00";
				}
			}
		}

		let initialDueDay = null;

		function calculateDueDate(useInitialDay = false) {
			const to = new Date(document.getElementById("ToMonth").value);
			const dueDateElement = document.getElementById("DueDate");
			let day;

			if (useInitialDay && initialDueDay !== null) {
				day = initialDueDay;
			} else {
				const currentDate = dueDateElement.value ? new Date(dueDateElement.value) : new Date();
				day = currentDate.getDate();
			}

			const minDueDate = new Date(to.getFullYear(), to.getMonth(), day);

			const year = minDueDate.getFullYear();
			const month = String(minDueDate.getMonth() + 1).padStart(2, '0');
			const dayFormatted = String(minDueDate.getDate()).padStart(2, '0');
			const formattedMin = `${year}-${month}-${dayFormatted}`;

			dueDateElement.min = formattedMin;

			if (!dueDateElement.value || new Date(dueDateElement.value) < minDueDate) {
				dueDateElement.value = formattedMin;
			}
		}

		// ========== QR Image Upload Script ==========
		document.addEventListener('DOMContentLoaded', function () {
			// For Invoice Calculation
			const initialDueDate = new Date(document.getElementById("DueDate").value);
			initialDueDay = initialDueDate.getDate();
			calculateTotal();
			calculateDueDate(true);

			document.getElementById("ToMonth").addEventListener("change", function () {
				calculateTotal();
				calculateDueDate();
			});

			document.getElementById("AmountPerMonth").addEventListener("input", calculateTotal);

			// For QR Upload Preview and Validation
			const imageFile = document.getElementById('imageFile');
			const imagePreview = document.getElementById('imagePreview');
			const imagePreviewContainer = document.getElementById('imagePreviewContainer');
			const uploadPrompt = document.getElementById('uploadPrompt');
			const removeImageBtn = document.getElementById('removeImageBtn');
			const imageUploadArea = document.getElementById('imageUploadArea');
			const clientFileError = document.getElementById('clientFileError');
			const submitBtn = document.querySelector('.submit-btn');

			function checkFormValidity() {
				const isFileSelected = imageFile.files && imageFile.files.length > 0;
				submitBtn.disabled = !(isFileSelected);
			}


			imageFile.addEventListener('change', function (e) {
				if (this.files && this.files[0]) {
					const file = this.files[0];
					clientFileError.classList.add('d-none');
					clientFileError.textContent = '';


					if (!file.type.match('image.*')) {
						showClientError('Please select an image file (JPG or PNG)');
						this.value = '';
						checkFormValidity();
						return;
					}

					const reader = new FileReader();
					reader.onload = function (e) {
						imagePreview.src = e.target.result;
						imagePreviewContainer.classList.remove('d-none');
						uploadPrompt.classList.add('d-none');
						checkFormValidity();
					}
					reader.readAsDataURL(file);
				} else {
					checkFormValidity();
				}
			});

			imageUploadArea.addEventListener('dragover', function (e) {
				e.preventDefault();
				this.classList.add('border-primary');
			});

			imageUploadArea.addEventListener('dragleave', function (e) {
				e.preventDefault();
				this.classList.remove('border-primary');
			});

			imageUploadArea.addEventListener('drop', function (e) {
				e.preventDefault();
				this.classList.remove('border-primary');

				if (e.dataTransfer.files.length) {
					imageFile.files = e.dataTransfer.files;
					const event = new Event('change');
					imageFile.dispatchEvent(event);
				}
			});

			removeImageBtn.addEventListener('click', function () {
				imageFile.value = '';
				imagePreview.src = '';
				imagePreviewContainer.classList.add('d-none');
				uploadPrompt.classList.remove('d-none');
				clientFileError.classList.add('d-none');
				clientFileError.textContent = '';
				checkFormValidity();
			});

			function showClientError(message) {
				clientFileError.textContent = message;
				clientFileError.classList.remove('d-none');
				imageUploadArea.classList.add('border-danger');
				setTimeout(() => {
					imageUploadArea.classList.remove('border-danger');
				}, 2000);
			}
		});
	</script>
}
