@model TenentManagement.ViewModel.PaymentInvoiceListViewModel
@{
    ViewData["Title"] = "All Invoices";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="mb-0">All Invoices</h2>
        <a asp-action="Detail" asp-controller="Unit" asp-route-id="@Model.UnitId" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left me-1"></i> Back to Unit
        </a>
    </div>

    <!-- Filter Section -->
    <div class="card mb-4 shadow-sm">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">From Month</label>
                    <input type="month" class="form-control" id="filterFromMonth">
                </div>

                <div class="col-md-3">
                    <label class="form-label">To Month</label>
                    <input type="month" class="form-control" id="filterToMonth">
                </div>

                <div class="col-md-2">
                    <label class="form-label">Due Date</label>
                    <select class="form-select" id="filterDueDate">
                        <option value="all">All</option>
                        <option value="overdue">Overdue</option>
                        <option value="upcoming">Upcoming</option>
                        <option value="today">Today</option>
                    </select>
                </div>

                <div class="col-md-2">
                    <label class="form-label">Status</label>
                    <select class="form-select" id="filterStatus">
                        <option value="all">All</option>
                        <option value="PAID">Paid</option>
                        <option value="PENDING">Pending</option>
                        <option value="UNPAID">Unpaid</option>
                    </select>
                </div>

                <div class="col-md-2">
                    <label class="form-label">Verified</label>
                    <select class="form-select" id="filterVerified">
                        <option value="all">All</option>
                        <option value="true">Verified</option>
                        <option value="false">Not Verified</option>
                    </select>
                </div>

                <div class="col-md-2">
                    <label class="form-label">Payment Method</label>
                    <select class="form-select" id="filterPaymentMethod">
                        <option value="all">All</option>
                        @foreach (var method in Model.PaymentInvoices.Select(i => i.PaymentMethod).Distinct())
                        {
                            <option value="@method">@method</option>
                        }
                    </select>
                </div>

                <div class="col-12 text-end">
                    <button class="btn btn-primary me-2" id="applyFilters">
                        <i class="bi bi-funnel me-1"></i> Apply Filters
                    </button>
                    <button class="btn btn-outline-secondary" id="resetFilters">
                        <i class="bi bi-arrow-counterclockwise me-1"></i> Reset
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-bordered table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th class="align-middle" rowspan="2">SN</th>
                            <th class="align-middle" rowspan="2">Invoice #</th>
                            <th class="align-middle" rowspan="2">Tenant</th>
                            <th colspan="2" class="text-center">Period</th>
                            <th class="align-middle text-end" rowspan="2">Amount</th>
                            <th class="align-middle" rowspan="2">Status</th>
                            <th class="align-middle" rowspan="2">Method</th>
                            <th class="align-middle" rowspan="2">Created</th>
                            <th class="align-middle" rowspan="2">Due Date</th>
                            <th class="align-middle text-center" rowspan="2">Verified</th>
                            <th class="align-middle" rowspan="2">Verified At</th>
                            <th class="align-middle" rowspan="2">Updated</th>
                            <th class="align-middle" rowspan="2">Remark</th>
                            <th class="align-middle text-end" rowspan="2">Actions</th>
                        </tr>
                        <tr>
                            <th>From</th>
                            <th>To</th>
                        </tr>
                    </thead>
                    <tbody id="invoiceTableBody">
                        @{
                            int serialNumber = 1;
                            foreach (var invoice in Model.PaymentInvoices)
                            {
                                <tr data-frommonth="@invoice.FromMonth.ToString("yyyy-MM")"
                                    data-tomonth="@invoice.ToMonth.ToString("yyyy-MM")"
                                    data-duedate="@invoice.DueDate.ToString("yyyy-MM-dd")"
                                    data-status="@invoice.Status"
                                    data-isverified="@invoice.IsVerified.ToString().ToLower()"
                                    data-paymentmethod="@invoice.PaymentMethod">
                                    <td class="text-center">@(serialNumber++)</td>
                                    <td class="fw-semibold">@invoice.Id</td>
                                    <td class="text-nowrap">@invoice.RenterName</td>
                                    <td class="text-nowrap">@invoice.FromMonth.ToString("MMM yyyy")</td>
                                    <td class="text-nowrap">@invoice.ToMonth.ToString("MMM yyyy")</td>
                                    <td class="text-end">@invoice.AmountDue.ToString("N2")</td>
                                    <td>
                                        @{
                                            var badgeClass = invoice.Status switch
                                            {
                                                "PAID" => "bg-success",
                                                "PENDING" => "bg-warning",
                                                "UNPAID" => "bg-danger",
                                                _ => "bg-secondary"
                                            };
                                        }
                                        <span class="badge @badgeClass">@invoice.Status</span>
                                    </td>
                                    <td>@invoice.PaymentMethod</td>
                                    <td class="text-nowrap">@invoice.CreatedAt.ToString("d MMM yyyy")</td>
                                    <td class="text-nowrap @(DateTime.Now > invoice.DueDate ? "text-danger" : "")">
                                        @invoice.DueDate.ToString("d MMM yyyy")
                                    </td>
                                    <td class="text-center">
                                        @if (invoice.IsVerified)
                                        {
                                            <span class="badge bg-success text-white">✓</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger text-white">✗</span>
                                        }
                                    </td>
                                    <td class="text-nowrap">
                                        @(invoice.VerifiedAt?.ToString("d MMM yyyy") ?? "-")
                                    </td>
                                    <td class="text-nowrap">
                                        @(invoice.UpdatedAt?.ToString("d MMM yyyy") ?? "-")
                                    </td>
                                    <td class="text-truncate" style="max-width: 150px;" title="@invoice.Remark">
                                        @invoice.Remark
                                    </td>
                                    <td class="text-end text-nowrap">
                                        @if (!invoice.IsVerified)
                                        {
                                            <div class="btn-group" role="group">
                                                <a asp-controller="PaymentInvoice"
                                                   asp-action="Edit"
                                                   asp-route-id="@invoice.Id"
                                                   class="btn btn-outline-primary btn-sm"
                                                   title="Edit Invoice">
                                                    <i class="bi bi-pencil-square"></i>
                                                </a>
                                                <button type="button"
                                                        class="btn btn-outline-danger btn-sm"
                                                        onclick="confirmDeletion('PaymentInvoice', @invoice.Id, '/PaymentInvoice/Delete')"
                                                        title="Delete Invoice">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        }
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
                @if (!Model.PaymentInvoices.Any())
                {
                    <div class="text-center py-4 text-muted">
                        <i class="bi bi-file-earmark-excel me-2"></i> No invoices found
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Pagination -->
    @if (Model.TotalPages > 1)
    {
        <nav aria-label="Invoice pagination" class="mt-4">
            <ul class="pagination justify-content-center">
                <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                    <a class="page-link"
                       asp-action="AllInvoice"
                       asp-controller="PaymentInvoice"
                       asp-route-id="@Model.UnitId"
                       asp-route-page="@(Model.CurrentPage - 1)">
                        <i class="bi bi-chevron-left"></i>
                    </a>
                </li>

                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        <a class="page-link"
                           asp-action="AllInvoice"
                           asp-controller="PaymentInvoice"
                           asp-route-id="@Model.UnitId"
                           asp-route-page="@i">
                            @i
                        </a>
                    </li>
                }

                <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                    <a class="page-link"
                       asp-action="AllInvoice"
                       asp-controller="PaymentInvoice"
                       asp-route-id="@Model.UnitId"
                       asp-route-page="@(Model.CurrentPage + 1)">
                        <i class="bi bi-chevron-right"></i>
                    </a>
                </li>
            </ul>
        </nav>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const applyFiltersBtn = document.getElementById('applyFilters');
            const resetFiltersBtn = document.getElementById('resetFilters');
            const invoiceTableBody = document.getElementById('invoiceTableBody');
            const invoiceRows = document.querySelectorAll('#invoiceTableBody tr[data-frommonth]');

            const noResultsRow = document.createElement('tr');
            noResultsRow.innerHTML = '<td colspan="15" class="text-center py-4 text-muted"><i class="bi bi-file-earmark-excel me-2"></i> No invoices match the selected filters</td>';
            noResultsRow.style.display = 'none';
            invoiceTableBody.appendChild(noResultsRow);

            const hasData = invoiceRows.length > 0;

            applyFiltersBtn.addEventListener('click', applyFilters);
            resetFiltersBtn.addEventListener('click', resetFilters);

            function applyFilters() {
                const fromMonth = document.getElementById('filterFromMonth').value;
                const toMonth = document.getElementById('filterToMonth').value;
                const dueDateFilter = document.getElementById('filterDueDate').value;
                const statusFilter = document.getElementById('filterStatus').value;
                const verifiedFilter = document.getElementById('filterVerified').value;
                const paymentMethodFilter = document.getElementById('filterPaymentMethod').value;
                const today = new Date().toISOString().split('T')[0];

                let visibleCount = 0;

                invoiceRows.forEach(row => {
                    const rowFromMonth = row.dataset.frommonth;
                    const rowToMonth = row.dataset.tomonth;
                    const rowDueDate = row.dataset.duedate;
                    const rowStatus = row.dataset.status;
                    const rowIsVerified = row.dataset.isverified;
                    const rowPaymentMethod = row.dataset.paymentmethod;

                    const monthMatch =
                        (fromMonth === '' || rowFromMonth >= fromMonth) &&
                        (toMonth === '' || rowToMonth <= toMonth);

                    let dueDateMatch = true;
                    if (dueDateFilter === 'overdue') {
                        dueDateMatch = rowDueDate < today;
                    } else if (dueDateFilter === 'upcoming') {
                        dueDateMatch = rowDueDate > today;
                    } else if (dueDateFilter === 'today') {
                        dueDateMatch = rowDueDate === today;
                    }

                    // Status filter
                    const statusMatch = statusFilter === 'all' || rowStatus === statusFilter;

                    // Verified filter
                    const verifiedMatch = verifiedFilter === 'all' || rowIsVerified === verifiedFilter;

                    // Payment method filter
                    const paymentMethodMatch = paymentMethodFilter === 'all' || rowPaymentMethod === paymentMethodFilter;

                    // Show/hide row based on all filters
                    if (monthMatch && dueDateMatch && statusMatch && verifiedMatch && paymentMethodMatch) {
                        row.style.display = '';
                        visibleCount++;
                    } else {
                        row.style.display = 'none';
                    }
                });

                updateSerialNumbers();

                // Show/hide no results message
                if (visibleCount === 0 && hasData) {
                    noResultsRow.style.display = '';
                } else {
                    noResultsRow.style.display = 'none';
                }
            }

            function resetFilters() {
                document.getElementById('filterFromMonth').value = '';
                document.getElementById('filterToMonth').value = '';
                document.getElementById('filterDueDate').value = 'all';
                document.getElementById('filterStatus').value = 'all';
                document.getElementById('filterVerified').value = 'all';
                document.getElementById('filterPaymentMethod').value = 'all';

                invoiceRows.forEach(row => {
                    row.style.display = '';
                });

                updateSerialNumbers();
                noResultsRow.style.display = 'none';
            }

            function updateSerialNumbers() {
                let visibleRows = document.querySelectorAll('#invoiceTableBody tr[data-frommonth]:not([style*="display: none"])');
                let counter = 1;

                visibleRows.forEach(row => {
                    const snCell = row.querySelector('td:first-child');
                    if (snCell) {
                        snCell.textContent = counter++;
                    }
                });
            }
        });
    </script>
}