@model TenentManagement.Models.Payment.PaymentInvoiceModel
@{
    ViewData["Title"] = "Create Invoice";
}
@{
    var utilityTypes = new[]
    {
        new { Id = 1, Name = "Electricity", Unit = "kWh" },
        new { Id = 2, Name = "Water", Unit = "m³" },
        new { Id = 3, Name = "Internet", Unit = "" }
    };
}

<div class="container py-5">
    <div class="card shadow-lg mx-auto rounded-corner" style="max-width: 900px;">
        <div class="card-header bg-primary text-white py-4 rounded-corner-top">
            <h1 class="h4 mb-0 text-center d-flex flex-column align-items-center">
                <span class="d-inline-flex align-items-center justify-content-center bg-opacity-25 bg-info text-white rounded-circle mb-2" style="width: 50px; height: 50px;">
                    <i class="bi bi-receipt"></i>
                </span>
                <span>Tenant Management System</span>
                <span class="mt-2 mb-0 text-center">
                    <i class="bi bi-plus-circle-fill me-2"></i>Create Invoice
                </span>
            </h1>
        </div>

        <div class="card-body p-4">
            <form method="post" asp-action="CreateInvoice" asp-controller="PaymentInvoice" class="needs-validation" novalidate>
                <input type="hidden" asp-for="UnitId" />
                <input type="hidden" asp-for="RenterId" />
                <input type="hidden" asp-for="OwnerId" />
                @for (int i = 0; i < Model.AvailableMonth.Count; i++)
                {
                    <input type="hidden" name="AvailableMonth[@i]" value="@Model.AvailableMonth[i].ToString("o")" />
                }
                <input type="hidden" asp-for="FromMonth" id="FromMonth" />

                <div class="row gx-5">
                    <!-- Left Column - Rent Information -->
                    <div class="col-lg-7">
                        <div class="border-end pe-4">
                            <h5 class="text-uppercase text-muted mb-3 fw-bold border-bottom pb-2">
                                <i class="bi bi-house me-2"></i>Rent Details
                            </h5>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label small text-muted">From Month</label>
                                        <select class="form-control" disabled>
                                            @{
                                                var month = Model.AvailableMonth.First();
                                                <option value="@Model.FromMonth.ToString("yyyy-MM-01")" selected>@Model.FromMonth.ToString("yyyy MMMM")</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label small text-muted">To Month</label>
                                        <select asp-for="ToMonth" id="ToMonth" class="form-control">
                                            @if (Model.AvailableMonth != null && Model.AvailableMonth.Any())
                                            {
                                                foreach (var m in Model.AvailableMonth.OrderBy(m => m))
                                                {
                                                    <option value="@m.ToString("yyyy-MM-01")">@m.ToString("yyyy MMMM")</option>
                                                }
                                            }
                                            else
                                            {
                                                <option disabled>No available months</option>
                                            }
                                        </select>

                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label asp-for="DueDate" class="form-label">Due Date *</label>
                                        <input asp-for="DueDate" type="date" class="form-control" id="DueDate" />
                                        <span asp-validation-for="DueDate" class="text-danger small"></span>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label small text-muted">Monthly Amount</label>
                                        <div class="input-group">
                                            <span class="input-group-text">Rs</span>
                                            <input asp-for="AmountPerMonth" class="form-control" id="AmountPerMonth" readonly />
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="mb-3 bg-light p-3 rounded">
                                <label class="form-label small text-muted">Total Rent</label>
                                <div class="input-group">
                                    <span class="input-group-text">Rs</span>
                                    <input asp-for="AmountDue" type="text" class="form-control fw-bold fs-5" id="TotalRentDisplay" readonly />
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Right Column - Utility Bills -->
                    <div class="col-lg-5">
                        <h5 class="text-uppercase text-muted mb-3 fw-bold border-bottom pb-2">
                            <i class="bi bi-lightning-charge me-2"></i>Utility Bills
                        </h5>

                        @for (int i = 0; i < utilityTypes.Length; i++)
                        {
                            var utility = utilityTypes[i];
                            var isInternet = utility.Id == 3;

                            <div class="mb-3 utility-bill" data-utility-type="@utility.Id">
                                <div class="d-flex justify-content-between align-items-center mb-1">
                                    <label class="form-label small text-muted fw-bold">
                                        @utility.Name @(!string.IsNullOrEmpty(utility.Unit) ? $"({utility.Unit})" : "")
                                    </label>
                                    <div class="form-check form-switch">
                                        <input class="form-check-input utility-toggle"
                                               type="checkbox"
                                               data-utility-type="@utility.Id">
                                    </div>
                                </div>

                                <div class="row g-2">
                                    @if (!isInternet)
                                    {
                                        <div class="col-6">
                                            <label class="form-label small text-muted">Consumed Units</label>
                                            <input type="number" step="0.01" min="0"
                                                   class="form-control utility-consumed"
                                                   data-utility-type="@utility.Id"
                                                   name="UtilityBills[@i].ConsumedUnit"
                                                    />
                                        </div>
                                    }
                                    <div class="@(isInternet ? "col-12" : "col-6")">
                                        <label class="form-label small text-muted">Amount</label>
                                        <div class="input-group">
                                            <span class="input-group-text">Rs</span>
                                            <input type="number" step="0.01" min="0"
                                                   class="form-control utility-amount"
                                                   data-utility-type="@utility.Id"
                                                   name="UtilityBills[@i].Amount"
                                                   ) />
                                        </div>
                                    </div>
                                </div>
                                    <input type="hidden"
                                           name="UtilityBills[@i].UtilityTypeId"
                                       value="@utility.Id" />
                            </div>
                        }

                        <div class="mt-3 bg-light p-3 rounded">
                            <label class="form-label small text-muted">Total Utilities</label>
                            <div class="input-group">
                                <span class="input-group-text">Rs</span>
                                <input type="text" class="form-control  fw-bold" id="TotalUtilitiesDisplay" readonly />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row mb-3 mt-4 border-top pt-3">
                    <div class="col-md-12">
                        <div class="d-flex justify-content-between align-items-center bg-primary bg-opacity-10 p-3 rounded">
                            <h5 class="mb-0 text-primary">Grand Total</h5>
                            <div class="input-group" style="max-width: 250px;">
                                <span class="input-group-text bg-white">Rs</span>
                                <input type="text" class="form-control fw-bold fs-4 text-end text-primary" id="GrandTotalDisplay"
                                        readonly />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row mb-3">
                    <!-- Owner Remarks -->
                    <div class="col-md-6">
                        <div class="card h-100 border-0 shadow-sm">
                            <div class="card-header bg-light d-flex align-items-center">
                                <i class="bi bi-chat-left-text-fill text-primary me-2"></i>
                                <h6 class="mb-0 fw-semibold">Owner Remarks</h6>
                            </div>
                            <div class="card-body p-0">
                                <textarea asp-for="OwnerRemark"
                                          rows="4"
                                          class="form-control border-0 p-3"
                                          style="min-height: 120px; resize: none;"
                                          placeholder="Enter any additional notes or comments..."></textarea>
                            </div>
                        </div>
                    </div>

                </div>

                

                <div class="mb-3">
                    <label asp-for="PaymentMethodId" class="form-label small text-muted">Payment Method *</label>
                    <select asp-for="PaymentMethodId" id="paymentMethodSelect" class="form-select" required>
                        @foreach (var method in Model.PaymentMethods)
                        {
                            <option value="@method.Id" selected="@(method.Id == Model.PaymentMethodId)">
                                @(method.PaymentMethod.Length > 0 ?
                                                            char.ToUpper(method.PaymentMethod[0]) + method.PaymentMethod.Substring(1).ToLower() :
                                                            method.PaymentMethod)
                        </option>
                                                }
                    </select>
                    <span asp-validation-for="PaymentMethodId" class="text-danger small"></span>
                </div>

                <div class="mb-3" id="paymentStatusContainer" style="display: none;">
                    <label asp-for="StatusId" class="form-label small text-muted">Payment Status *</label>
                    <select asp-for="StatusId" class="form-select" required>
                        @foreach (var status in Model.PaymentStatuses)
                        {
                            <option value="@status.Id" selected="@(status.Id == Model.StatusId)">
                                @(status.Status.Length > 0 ?
                                                            char.ToUpper(status.Status[0]) + status.Status.Substring(1).ToLower() :
                                                            status.Status)
                        </option>
                                                }
                    </select>
                    <span asp-validation-for="StatusId" class="text-danger small"></span>
                </div>

                <div class="d-grid gap-2">
                    <button type="submit" class="btn btn-primary w-100 py-2 mt-3 rounded-corner">
                        <i class="bi bi-file-earmark-text-fill me-2"></i>Create Invoice
                    </button>
                    <a asp-action="Detail" asp-controller="Unit" asp-route-id="@Model.UnitId" class="btn btn-outline-secondary py-2 rounded-corner">
                        <i class="bi bi-arrow-left me-2"></i>Back to Unit
                    </a>
                </div>
            </form>
        </div>
    </div>
</div>


@section Scripts {
	<script>
        // Calculate rent total
               function calculateRentTotal() {
                   const from = new Date(document.getElementById("FromMonth").value);
                   const to = new Date(document.getElementById("ToMonth").value);
                   const amount = parseFloat(document.getElementById("AmountPerMonth").value);

                   if (!isNaN(from) && !isNaN(to) && !isNaN(amount)) {
                       const months = (to.getFullYear() - from.getFullYear()) * 12 + (to.getMonth() - from.getMonth());
                       if (months > 0) {
                           document.getElementById("TotalRentDisplay").value = (months * amount).toFixed(2);
                       } else {
                           document.getElementById("TotalRentDisplay").value = "0.00";
                       }
                   }
                   calculateGrandTotal();
               }

               // Calculate utilities total
               function calculateUtilitiesTotal() {
                   let total = 0;
                   document.querySelectorAll('.utility-bill').forEach(bill => {
                       const isActive = bill.querySelector('.utility-toggle').checked;
                       if (isActive) {
                           const amountInput = bill.querySelector('.utility-amount');
                           const amount = parseFloat(amountInput.value) || 0;
                           total += amount;
                       }
                   });
                   document.getElementById("TotalUtilitiesDisplay").value = total.toFixed(2);
                   calculateGrandTotal();
               }

               // Calculate grand total
               function calculateGrandTotal() {
                   const rentTotal = parseFloat(document.getElementById("TotalRentDisplay").value) || 0;
                   const utilitiesTotal = parseFloat(document.getElementById("TotalUtilitiesDisplay").value) || 0;
                   document.getElementById("GrandTotalDisplay").value = (rentTotal + utilitiesTotal).toFixed(2);
               }

               // Toggle utility bill fields
        function setupUtilityToggles() {
            document.querySelectorAll('.utility-toggle').forEach(toggle => {
                const billSection = toggle.closest('.utility-bill');
                const inputs = billSection.querySelectorAll('input:not(.utility-toggle):not([type="hidden"])'); 

                // Disable all inputs initially
                inputs.forEach(input => {
                    input.disabled = true;
                });

                toggle.addEventListener('change', function() {
                    inputs.forEach(input => {
                        input.disabled = !this.checked;
                        if (!this.checked) {
                            // Clear values when unchecked
                            if (input.classList.contains('utility-amount') ||
                                input.classList.contains('utility-consumed')) {
                                input.value = '';
                            }
                        }
                    });
                    calculateUtilitiesTotal();
                });
            });
        }
        //Due date
		let initialDueDay = null;
		function calculateDueDate(useInitialDay = false) {
		const to = new Date(document.getElementById("ToMonth").value);
		const dueDateElement = document.getElementById("DueDate");
		let day;
		if (useInitialDay && initialDueDay !== null) {
			day = initialDueDay;
		} else {
			const currentDate = dueDateElement.value ? new Date(dueDateElement.value) : new Date();
			day = currentDate.getDate();
		}

		const minDueDate = new Date(to.getFullYear(), to.getMonth(), day);

		const year = minDueDate.getFullYear();
		const month = String(minDueDate.getMonth() + 1).padStart(2, '0');
		const dayFormatted = String(minDueDate.getDate()).padStart(2, '0');
		const formattedMin = `${year}-${month}-${dayFormatted}`;

			dueDateElement.min = formattedMin;
			console.log(formattedMin);
			if (!dueDateElement.value || new Date(dueDateElement.value) < minDueDate) {
				dueDateElement.value = formattedMin;
			}
		}

        //due Date
        function setupPaymentVisibility() {
                    const paymentMethodSelect = document.getElementById('paymentMethodSelect');
                    const paymentStatusContainer = document.getElementById('paymentStatusContainer');

                    function togglePaymentStatus() {
                        const selectedValue = paymentMethodSelect.value;
                        const cashPaymentId = @Model.PaymentMethods.FirstOrDefault(m => m.PaymentMethod.Equals("CASH", StringComparison.OrdinalIgnoreCase))?.Id ?? 0;

                        if (selectedValue == cashPaymentId) {
                            paymentStatusContainer.style.display = 'block';
                            document.getElementById('StatusId').required = true;
                        } else {
                            paymentStatusContainer.style.display = 'none';
                            document.getElementById('StatusId').required = false;
                        }
                    }

                    // Initial check
                    togglePaymentStatus();

                    // Add event listener
                    paymentMethodSelect.addEventListener('change', togglePaymentStatus);
                }
        // Initialize
        document.addEventListener("DOMContentLoaded", function() {
            setupUtilityToggles();
            setupPaymentVisibility();

            const initialDueDate = new Date(document.getElementById("DueDate").value);
            initialDueDay = initialDueDate.getDate();

            calculateRentTotal();
            calculateUtilitiesTotal();
            calculateDueDate(true);

            // Event listeners
            document.getElementById("ToMonth").addEventListener("change", function() {
                calculateRentTotal();
                calculateDueDate();
            });

            document.querySelectorAll('.utility-amount').forEach(input => {
                input.addEventListener('input', calculateUtilitiesTotal);
            });
        });
	</script>
}
