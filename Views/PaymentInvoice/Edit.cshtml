@model TenentManagement.Models.Payment.PaymentInvoiceModel
@{
	ViewData["Title"] = "Edit Invoice";

}

<div class="container py-5">
	<div class="card shadow-lg mx-auto rounded-corner" style="max-width: 700px;">
		<div class="card-header bg-primary text-white py-4 rounded-corner-top">
			<h1 class="h4 mb-0 text-center d-flex flex-column align-items-center">
				<span class="d-inline-flex align-items-center justify-content-center bg-opacity-25 bg-info text-white rounded-circle mb-2" style="width: 50px; height: 50px;">
					<i class="bi bi-receipt"></i>
				</span>
				<span>Tenant Management System</span>
				<span class="mt-2 mb-0 text-center">
					<i class="bi bi-plus-circle-fill me-2"></i>Create Invoice
				</span>
			</h1>
		</div>

		<div class="card-body p-4">
			<form method="post" asp-action="Edit" asp-controller="PaymentInvoice" class="needs-validation" novalidate>
				<input type="hidden" asp-for="UnitId" />
				<input type="hidden" asp-for="RenterId" />
				<input type="hidden" asp-for="OwnerId" />
				<input type="hidden" asp-for="FromMonth" id="FromMonth" />
				<input type="hidden" asp-for="ToMonth" id="ToMonth" />


				<div class="mb-3">
					<label class="form-label small text-muted">From Month *</label>
					<select class="form-control" disabled>
						@{
							<option value="@Model.FromMonth.ToString("yyyy-MM-01")" selected>@Model.FromMonth.ToString("yyyy MMMM")</option>

						}


					</select>
				</div>

				<div class="mb-3">
					<label class="form-label small text-muted">To Month *</label>
					<select asp-for="ToMonth" id="ToMonth" class="form-control" disabled>
						<option value="@Model.ToMonth.ToString("yyyy-MM-01")" selected>@Model.ToMonth.ToString("yyyy MMMM")</option>
					</select>

				</div>

				<div class="mb-3">
					<label class="form-label small text-muted">Amount Per Month *</label>
					<div class="input-group">
						<span class="input-group-text">Rs.</span>
						<input asp-for="AmountPerMonth" class="form-control" id="AmountPerMonth" placeholder="e.g. 10000" readonly />
					</div>
					@* <span asp-validation-for="AmountPerMonth" class="text-danger small"></span> *@
				</div>

				<div class="mb-3">
					<label class="form-label small text-muted">Total Amount</label>
					<div class="input-group">
						<span class="input-group-text">Rs</span>
						<input asp-for="AmountDue" type="text" class="form-control" id="TotalAmountDisplay" readonly />
					</div>
				</div>
				<div class="mb-3">
					<label asp-for="DueDate" class="form-label">Rent Due Date *</label>
					<input asp-for="DueDate" id="DueDate" type="date" class="form-control" />
				</div>

				<div class="mb-3">
					<label asp-for="Remark" class="form-label small text-muted">Remark</label>
					<textarea asp-for="Remark" class="form-control" placeholder="Remark" rows="3"></textarea>
					<span asp-validation-for="Remark" class="text-danger small"></span>
				</div>

				<div class="mb-3">
					<label asp-for="PaymentMethodId" class="form-label small text-muted">Payment Method *</label>
					<select asp-for="PaymentMethodId" class="form-select" required>
						@foreach (var method in Model.PaymentMethods)
						{
							<option value="@method.Id" selected="@(method.Id == Model.PaymentMethodId)">
								@(method.PaymentMethod.Length > 0 ?
															char.ToUpper(method.PaymentMethod[0]) + method.PaymentMethod.Substring(1).ToLower() :
															method.PaymentMethod)
							</option>
						}
					</select>
					<span asp-validation-for="PaymentMethodId" class="text-danger small"></span>
				</div>

				<div class="mb-3">
					<label asp-for="StatusId" class="form-label small text-muted">Payment Status *</label>
					<select asp-for="StatusId" class="form-select" required>
						@foreach (var status in Model.PaymentStatuses)
						{
							<option value="@status.Id" selected="@(status.Id == Model.StatusId)">
								@(status.Status.Length > 0 ?
															char.ToUpper(status.Status[0]) + status.Status.Substring(1).ToLower() :
															status.Status)
							</option>
						}
					</select>
					<span asp-validation-for="StatusId" class="text-danger small"></span>
				</div>
				<div class="form-group mb-3">
					<label class="form-label small text-muted" asp-for="IsVerified">Payment Verified by Owner?</label><br>

					<label>
						<input type="radio" asp-for="IsVerified" value="true" /> Yes
					</label>

					<label class="ms-3">
						<input type="radio" asp-for="IsVerified" value="false" /> No
					</label>
				</div>

				<button type="submit" class="btn btn-primary w-100 py-2 mt-3 rounded-corner">
					<i class="bi bi-file-earmark-text-fill me-2"></i>Update Invoice
				</button>

				<div class="text-center small mt-4">
				    <a asp-action="AllInvoice" asp-controller="PaymentInvoice" asp-route-id="@Model.UnitId" class="text-muted text-decoration-none">← Back to Invoices</a>
				</div>
			</form>
		</div>
	</div>
</div>

@section Scripts {
	<script>
		function calculateTotal() {
			const from = new Date(document.getElementById("FromMonth").value);
			const to = new Date(document.getElementById("ToMonth").value);
			const amount = parseFloat(document.getElementById("AmountPerMonth").value);

			if (!isNaN(from) && !isNaN(to) && !isNaN(amount)) {
				const months = (to.getFullYear() - from.getFullYear()) * 12 + (to.getMonth() - from.getMonth());
				if (months > 0) {
					document.getElementById("TotalAmountDisplay").value = (months * amount).toFixed(2);
				} else {
					document.getElementById("TotalAmountDisplay").value = "0.00";
				}
			}
		}
		let initialDueDay = null;
		function calculateDueDate(useInitialDay = false) {
		const to = new Date(document.getElementById("ToMonth").value);
		const dueDateElement = document.getElementById("DueDate");
		let day;
		if (useInitialDay && initialDueDay !== null) {
			day = initialDueDay;
		} else {
			const currentDate = dueDateElement.value ? new Date(dueDateElement.value) : new Date();
			day = currentDate.getDate();
		}

		const minDueDate = new Date(to.getFullYear(), to.getMonth(), day);

		const year = minDueDate.getFullYear();
		const month = String(minDueDate.getMonth() + 1).padStart(2, '0');
		const dayFormatted = String(minDueDate.getDate()).padStart(2, '0');
		const formattedMin = `${year}-${month}-${dayFormatted}`;

			dueDateElement.min = formattedMin;
			console.log(formattedMin);
			if (!dueDateElement.value || new Date(dueDateElement.value) < minDueDate) {
				dueDateElement.value = formattedMin;
			}
		}




		document.getElementById("ToMonth").addEventListener("change", function() {
			calculateTotal();
			calculateDueDate();
		});
		document.getElementById("AmountPerMonth").addEventListener("input", calculateTotal);
		window.addEventListener("DOMContentLoaded", function() {
					const initialDueDate = new Date(document.getElementById("DueDate").value);
					initialDueDay = initialDueDate.getDate();
					calculateTotal();
					calculateDueDate(true);

					document.getElementById("ToMonth").addEventListener("change", function() {
						calculateTotal();
						calculateDueDate();
					});

					document.getElementById("AmountPerMonth").addEventListener("input", calculateTotal);
		 });
	</script>
}
