@model TenentManagement.Models.Payment.PaymentInvoiceModel
@using TenentManagement.Services.Utilities;
@{
	ViewData["Title"] = "Edit Invoice";
	bool all = ViewData["All"] as bool? ?? false;
}

<div class="container py-5">
	<div class="card shadow-lg mx-auto rounded-corner" style="max-width: 700px;">
		<div class="card-header bg-primary text-white py-4 rounded-corner-top">
			<h1 class="h4 mb-0 text-center d-flex flex-column align-items-center">
				<span class="d-inline-flex align-items-center justify-content-center bg-opacity-25 bg-info text-white rounded-circle mb-2" style="width: 50px; height: 50px;">
					<i class="bi bi-receipt"></i>
				</span>
				<span>Tenant Management System</span>
				<span class="mt-2 mb-0 text-center">
					<i class="bi bi-plus-circle-fill me-2"></i>Edit Invoice
				</span>
			</h1>
		</div>

		<div class="card-body p-4">
			<form method="post" asp-action="Edit" asp-controller="PaymentInvoice" class="needs-validation" novalidate>
				<input type="hidden" asp-for="UnitId" />
				<input type="hidden" asp-for="RenterId" />
				<input type="hidden" asp-for="OwnerId" />
				<input type="hidden" asp-for="FromMonth" id="FromMonth" />
				<input type="hidden" asp-for="ToMonth" id="ToMonth" />
				<input type="hidden" name="all" value="@all.ToString()" />


				<div class="row mb-3">
					<div class="col-md-6">
						<label class="form-label small text-muted">From Month *</label>
						<select class="form-control" disabled>
							@{
								<option value="@Model.FromMonth.ToString("yyyy-MM-01")" selected>@Model.FromMonth.ToString("yyyy MMMM")</option>

							}


						</select>
					</div>

					<div class="col-md-6">
						<label class="form-label small text-muted">To Month *</label>
						<select asp-for="ToMonth" id="ToMonth" class="form-control" disabled>
							<option value="@Model.ToMonth.ToString("yyyy-MM-01")" selected>@Model.ToMonth.ToString("yyyy MMMM")</option>
						</select>

					</div>
				</div>

				<div class="row mb-3">
					<div class="col-md-6">
						<label class="form-label small text-muted">Amount Per Month *</label>
						<div class="input-group">
							<span class="input-group-text">Rs.</span>
							<input asp-for="AmountPerMonth" class="form-control" id="AmountPerMonth" placeholder="e.g. 10000" readonly />
						</div>
						@* <span asp-validation-for="AmountPerMonth" class="text-danger small"></span> *@
					</div>

					<div class="col-md-6">
						<label class="form-label small text-muted">Total Amount</label>
						<div class="input-group">
							<span class="input-group-text">Rs</span>
							<input asp-for="AmountDue" type="text" class="form-control" id="TotalAmountDisplay" readonly />
						</div>
					</div>
				</div>
				<div class="mb-3">
					<label asp-for="DueDate" class="form-label">Rent Due Date *</label>
					<input asp-for="DueDate" id="DueDate" type="date" class="form-control" />
				</div>

				<div class="mb-3">
					<label asp-for="OwnerRemark" class="form-label small text-muted"></label>
					<textarea asp-for="OwnerRemark" class="form-control" placeholder="Anything to add?" rows="3"></textarea>
					<span asp-validation-for="OwnerRemark" class="text-danger small"></span>
				</div>

				<div class="mb-3">
					<label asp-for="PaymentMethodId" class="form-label small text-muted">Payment Method *</label>
					<select asp-for="PaymentMethodId" class="form-select" required>
						@foreach (var method in Model.PaymentMethods)
						{
							<option value="@method.Id" selected="@(method.Id == Model.PaymentMethodId)">
								@(method.PaymentMethod.Length > 0 ?
																						char.ToUpper(method.PaymentMethod[0]) + method.PaymentMethod.Substring(1).ToLower() :
																						method.PaymentMethod)
							</option>
						}
					</select>
					<span asp-validation-for="PaymentMethodId" class="text-danger small"></span>
				</div>

				@if (Model.PaymentProof != null)
				{
					<div class="mb-4">
						<label class="form-label small text-muted">@Model.PaymentMethod.ToTitleCase() Payment Proof</label>
						<div class="border rounded p-3 bg-light">
							<div class="text-center mb-3">
								<img src="@Model.PaymentProof.Base64Image"
								class="img-fluid rounded shadow-sm"
								style="max-height: 300px;"
								alt="@Model.PaymentMethod.ToTitleCase() Payment Proof" />
							</div>
							<div class="d-flex justify-content-center gap-2">
								<button type="button" class="btn btn-sm btn-outline-primary"
								data-bs-toggle="modal"
								data-bs-target="#proofModal">
									<i class="bi bi-zoom-in me-1"></i> View Larger
								</button>
								<a href="@Model.PaymentProof.Base64Image"
								download="payment-proof-@DateTime.UtcNow.ToString("yyyyMMdd")"
								class="btn btn-sm btn-outline-secondary">
									<i class="bi bi-download me-1"></i> Download
								</a>
							</div>
						</div>
					</div>
				}
				<div class="row mb-3">
					<div class="col-md-6">
						<label asp-for="StatusId" class="form-label small text-muted">Payment Status *</label>
						<div class="input-group">
							<select asp-for="StatusId" class="form-select" id="statusSelect" required>
								@foreach (var status in Model.PaymentStatuses)
								{
									<option value="@status.Id" selected="@(status.Id == Model.StatusId)">
										@status.Status.ToTitleCase()
									</option>
								}
							</select>
							<span class="input-group-text" id="statusIcon">
								<i class="bi bi-question-circle-fill text-warning"></i>
							</span>
						</div>
						<span asp-validation-for="StatusId" class="text-danger small"></span>
					</div>

					<div class="form-group col-md-6">
						<label class="form-label small text-muted" asp-for="IsVerified">Valid Payment?</label>
						<div class="mt-2">
							<div class="form-check form-check-inline">
								<input class="form-check-input" type="radio" asp-for="IsVerified" value="true" id="verifiedYes" />
								<label class="form-check-label" for="verifiedYes">Yes</label>
							</div>
							<div class="form-check form-check-inline">
								<input class="form-check-input" type="radio" asp-for="IsVerified" value="false" id="verifiedNo" checked />
								<label class="form-check-label" for="verifiedNo">No</label>
							</div>
							<span class="ms-2" id="verifiedIcon">
								<i class="bi bi-question-circle-fill text-warning"></i>
							</span>
						</div>
					</div>
				</div>


				<div class="alert alert-info mb-3 d-flex align-items-start" id="validationAlert" style="border-left: 4px solid #0dcaf0;">
					<div class="pe-3">
						<i class="bi bi-info-circle-fill alert-info fs-4"></i>
					</div>
					<div>
						<p class="mb-1 fw-bold">Payment Validation Guide</p>
						<ul class="mb-0" style="list-style-type: none; padding-left: 0;">
							<li class="d-flex align-items-baseline">
								<span class="me-2">•</span>
								<span>Select <span class="badge bg-success">Paid</span> & <span class="badge bg-success">Yes</span> for valid payment</span>
							</li>
							<li class="d-flex align-items-baseline">
								<span class="me-2">•</span>
								<span>Select <span class="badge bg-danger">Unpaid</span> & <span class="badge bg-danger">No</span> for invalid payment</span>
							</li>
						</ul>
					</div>
				</div>

				<div class="d-grid gap-2">
					<button type="submit" class="btn btn-primary w-100 py-2 mt-3 rounded-corner" id="submitButton">
						<i class="bi bi-file-earmark-text-fill me-2"></i>Update Invoice
					</button>
					@if (all)
					{
						<a asp-action="AllInvoice" asp-route-id="@Context.Session.GetInt32("UserId")" class="btn btn-outline-secondary py-2 rounded-corner">
							<i class="bi bi-arrow-left me-2"></i>Back to Invoices
						</a>
					}
					else
					{
					<a asp-action="UnitInvoices"
					asp-controller="PaymentInvoice"
					asp-route-id="@Model.UnitId"
					   class="btn btn-outline-secondary py-2 rounded-corner">
						<i class="bi bi-arrow-left me-2"></i>Back to Invoices
				</a>						
					}
				</div>
			</form>
		</div>
	</div>
</div>

<!-- Payment Proof Modal -->
<div class="modal fade" id="proofModal" tabindex="-1" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered modal-lg">
		<div class="modal-content border-0 shadow">
			<div class="modal-header bg-primary text-white">
				<h5 class="modal-title">
					<i class="bi bi-receipt me-2"></i> Payment Proof
				</h5>
				<button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body text-center p-4">
				<div class="d-flex justify-content-center">
					<img src="@Model.PaymentProof?.Base64Image"
						 class="img-fluid rounded"
						 style="max-height: 70vh;"
						 alt="Payment Proof" />
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
				<a href="@Model.PaymentProof?.Base64Image"
				   download="payment-proof-@DateTime.UtcNow.ToString("yyyyMMdd")"
				   class="btn btn-primary">
					<i class="bi bi-download me-1"></i> Download
				</a>
			</div>
		</div>
	</div>
</div>

@section Scripts {
	<script>
		function calculateTotal() {
			const from = new Date(document.getElementById("FromMonth").value);
			const to = new Date(document.getElementById("ToMonth").value);
			const amount = parseFloat(document.getElementById("AmountPerMonth").value);

			if (!isNaN(from) && !isNaN(to) && !isNaN(amount)) {
				const months = (to.getFullYear() - from.getFullYear()) * 12 + (to.getMonth() - from.getMonth());
				if (months > 0) {
					document.getElementById("TotalAmountDisplay").value = (months * amount).toFixed(2);
				} else {
					document.getElementById("TotalAmountDisplay").value = "0.00";
				}
			}
		}
		let initialDueDay = null;
		function calculateDueDate(useInitialDay = false) {
		const to = new Date(document.getElementById("ToMonth").value);
		const dueDateElement = document.getElementById("DueDate");
		let day;
		if (useInitialDay && initialDueDay !== null) {
			day = initialDueDay;
		} else {
			const currentDate = dueDateElement.value ? new Date(dueDateElement.value) : new Date();
			day = currentDate.getDate();
		}

		const minDueDate = new Date(to.getFullYear(), to.getMonth(), day);

		const year = minDueDate.getFullYear();
		const month = String(minDueDate.getMonth() + 1).padStart(2, '0');
		const dayFormatted = String(minDueDate.getDate()).padStart(2, '0');
		const formattedMin = `${year}-${month}-${dayFormatted}`;

			dueDateElement.min = formattedMin;
			console.log(formattedMin);
			if (!dueDateElement.value || new Date(dueDateElement.value) < minDueDate) {
				dueDateElement.value = formattedMin;
			}
		}

						function updateValidationStatus() {
			const statusSelect = document.getElementById('statusSelect');
			const isVerifiedYes = document.getElementById('verifiedYes').checked;
			const statusIcon = document.getElementById('statusIcon');
			const verifiedIcon = document.getElementById('verifiedIcon');
			const button = document.getElementById('submitButton');

			const selectedStatus = statusSelect.options[statusSelect.selectedIndex].text.toLowerCase();

			// Reset icons
			statusIcon.innerHTML = '<i class="bi bi-question-circle-fill text-warning"></i>';
			verifiedIcon.innerHTML = '';

			// Default to disabled
			button.disabled = true;

			if (selectedStatus === 'paid') {
					statusIcon.innerHTML = '<i class="bi bi-check-circle-fill text-success"></i>';
				if (isVerifiedYes) {
					verifiedIcon.innerHTML = '<i class="bi bi-check-circle-fill text-success"></i>';
					button.disabled = false;
				} else {
					verifiedIcon.innerHTML = '<i class="bi bi-x-circle-fill text-danger"></i>';
					button.disabled = true;
				}
			}
			else if (selectedStatus === 'unpaid') {
				statusIcon.innerHTML = '<i class="bi bi-check-circle-fill text-success"></i>';
				if (!isVerifiedYes) {
					verifiedIcon.innerHTML = '<i class="bi bi-check-circle-fill text-success"></i>';
					button.disabled = false;
				} else {
					verifiedIcon.innerHTML = '<i class="bi bi-x-circle-fill text-danger"></i>';
					button.disabled = true;
				}
			}
			else if (selectedStatus === 'pending') {
				button.disabled = true;
			}
		}


		document.getElementById("ToMonth").addEventListener("change", function() {
			calculateTotal();
			calculateDueDate();
		});
		document.getElementById("AmountPerMonth").addEventListener("input", calculateTotal);
		window.addEventListener("DOMContentLoaded", function() {
					const initialDueDate = new Date(document.getElementById("DueDate").value);
					initialDueDay = initialDueDate.getDate();
					calculateTotal();
					calculateDueDate(true);

					document.getElementById("ToMonth").addEventListener("change", function() {
						calculateTotal();
						calculateDueDate();
					});

					document.getElementById("AmountPerMonth").addEventListener("input", calculateTotal);
					 document.getElementById('statusSelect').addEventListener('change', updateValidationStatus);
			document.getElementById('verifiedYes').addEventListener('change', updateValidationStatus);
			document.getElementById('verifiedNo').addEventListener('change', updateValidationStatus);

			// Initialize validation status
			updateValidationStatus();
		 });
	</script>
}
